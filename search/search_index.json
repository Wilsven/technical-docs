{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Data Analytics &amp; AI Documentation","text":""},{"location":"blog/","title":"Articles","text":""},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/","title":"Sentence Transformers for Sentence Similarity","text":"<p>In this article, we will take a look at the history leading up to the creation of Sentence Transformers, the shortcomings of past architectures across various Natural Language Processing (NLP) tasks (mainly sentence similarity) and how Sentence Transformers tackle these problems.</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#introduction","title":"Introduction","text":"Overview history of Sentence Transformer."},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#recurrent-networks","title":"Recurrent Networks","text":"From left to right: Vector-to-sequence, Sequence-to-vector and Sequence-to-sequence. <p>Clearly, Recurrent Neural Networks (RNNs) are versatile but for language problems, they have their disadvantages:</p> <p>Disadvantages:</p> <ol> <li>Slow to train and slow at inference</li> <li>This is because the input words are processed one at a time, sequentially. Therefore, longer      sentences just take a longer time.</li> <li>Do not truly understand context</li> <li>RNNs only learn about a word based on the words that came before it. In reality, the context of      a word depends on the sentence as a whole.</li> <li>Bidirectional Long Short-Term Memory (LSTMs) try to address this but even here, the left to      right and right to left context are learned separately and are concatenated so some of the true      context are lost.</li> </ol>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#transformer-networks","title":"Transformer Networks","text":"The encoder-decoder structure of the Transformer architecture. Taken from \u201cAttention Is All You Need\u201c. A sentence passing through the Transformer generating an embedding vector for each word. <p>For English to French translation, we pass in the entire English sentence into the encoder simultaneously. Then, we get the corresponding word vectors simultaneously. These word vectors encode the meaning of the word and they are better than RNNs because they understand bidirectional context through attention units.</p> <p>Now we pass these vectors into the decoder along with the previously generated French words to generate the next French word in the sentence. We keep passing the French words that were generated into the decoder until we hit the end of sentence.</p> <p>Transformers work well for sequence to sequence problems but for the specific natural language problems like question answering and text summarization, even Transformers have drawbacks related to one fact \u2014 language is complicated.</p> <p>Disadvantages:</p> <ol> <li>Need a lot of data</li> <li>Architecture may not be complex enough</li> <li>Transformers may not be complex enough to understand patterns to solve these language problems.      After all, Transformers weren\u2019t designed to be language models so the word representations      generated can still be improved.</li> </ol>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#bert-networks","title":"BERT Networks","text":"<p>BERT was introduced to extend the capabilities of the Transformer. BERT was built with the ideology that different Natural Language Processing (NLP) problems all rely on the same fundamental understanding of language.</p> Overall pre-training and fine-tuning procedures for BERT. Apart from output layers, the same architectures are used in both pre-training and fine-tuning. The same pre-trained model parameters are used to initialize models for different down-stream tasks. During fine-tuning, all parameters are fine-tuned. [CLS] is a special symbol added in front of every input example, and [SEP] is a special separator token (e.g. separating questions/answers)."},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#phases","title":"Phases","text":"<p>BERT undergoes two phases of training:</p> <ol> <li>Pre-Training: Understand Language</li> <li>Fine Tuning: Understand Language specific tasks</li> </ol>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#advantages-over-transformers","title":"Advantages over Transformers","text":"<ol> <li>Needing a lot of data \u2192 Fine tuning does not require obscene amounts of data</li> <li>Architecture may not be complex enough \u2192 BERT is a stack of Transformer encoders and is    therefore known as B\u200bidirectional E\u200bncoder R\u200bepresentations from    T\u200bransformers.</li> <li>Bidirectional: It is bidirectional since it understands the context of words looking both      ways via attention.</li> <li>Encoder &amp; Transformers: Since BERT is essentially a stack of the encoder part of the      Transformer.</li> <li>Representations: Since BERT is pre-trained to be a language model, it better understands      word representations. This means the output word vectors from BERT better encapsulates the      meaning of the words in sentences.</li> </ol> Various NLP tasks. <p>The big takeaway here is that BERT can now solve a host of complex language specific problems except for one type.</p> <p> !!! example \"\ud83d\udcad Imagine\"</p> <pre><code>Imagine you\u2019re a Data Scientist at Quora which is a question answer site and you want to design a system that find related questions to the one that is currently being asked. How would we solve this with BERT?\n\n&lt;figure markdown=\"span\"&gt;\n  ![quora](../../assets/images/quora.png){ width=500 }\n  &lt;figcaption&gt;You're a Data Scientist trying to design a system that find related questions to the one that is currently being asked&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>Goal: Determine questions similar to the one being asked. </p> A simple schematic diagram illustrating the process of embedding the words across many sentences. <p>Steps:</p> <ol> <li>First take the question that is being asked and another question that had been asked in the past,    pass both of these questions into BERT</li> <li>BERT generates word vectors</li> <li>Pipe these word vectors into some feed forward layer such that the output would be a single    neuron corresponding to the similarity score</li> <li>Repeat the steps for every question on the platform to compute the pairwise similarity</li> <li>Select the highest similarity scores and the corresponding questions will be the most similar and    relevant to the question that is being asked</li> </ol> <p> !!! warning</p> <pre><code>However, there is a big issue here. If there are 100 million questions on the platform, we\u2019d have to run the forward pass of BERT 100 million times every single time a new question comes in. This is not viable!\n</code></pre> <p>So the next question so ask is: how do we make BERT work for the current goal?</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#sentence-transformers","title":"Sentence Transformers","text":""},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#pass-1-high-level-idea","title":"Pass 1: High Level Idea","text":"Embedding space: It contains vectors of the questions that represent meaning. <p>Steps:</p> <ol> <li>We would want to pass the new question into BERT to get a single vector that represents the    meaning of the question.</li> <li>Compare the vector of the new question to the vectors of all other questions using a similarity    metric (i.e. cosine similarity).</li> <li>Return the nearest neighbours as the most related questions to the new question.</li> </ol> <p>Therefore, for every new question asked, we only require a single forward pass of the BERT model not 100 million times as mentioned before. This is great because computing simple similarity metrics between vectors is much cheaper than passing in all questions on the platform through the complex model every time you need to make a decision.</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#pass-2-sentence-transformers","title":"Pass 2: Sentence Transformers","text":"<p>In the first pass, a new question is passed into BERT to get a single vector that represents the question. However, BERT only gives us word vectors. Therefore, in order to get a single vector, you\u2019ll need to somehow aggregate these word vectors by passing it through some unit.</p> <p>The most straightforward way of doing this is to take the average of these vectors. This is known as mean pooling. Another way is to take the maximum value across every dimension of the embedding. This is known as max pooling.</p> BERT outputs vectors for each word so in order to get a vector for the question/sentence, we need to aggregate these word vectors. This is the simplest form of a Sentence Transformer. <p>The diagram above shows the simplest form of a Sentence Transformer but the output vector generated is extremely poor quality. Its quality is so poor that you might be better off simply taking the average of GloVe embeddings (and not even using BERT).</p> Source: Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks https://arxiv.org/pdf/1908.10084 <p>How to get sentence vectors with meaning?</p> <p>In order for BERT to create sentence vectors that actually have meaning, we need to further train it (fine-tune) on sentence level tasks (refer to next section for more information).</p> <p>Once we train (fine-tune) BERT on one or all of these tasks, the sentence vector generated becomes a good representation of the sentence \u2014 that is, it encodes the meaning of the sentence very well.</p> <p>This is important since it means that closer the vectors are in terms of distance, the more similar is the meaning.</p> <p>Info</p> <p>In our Quora questioning setting, we would pass every question through the sentence transformer once and store them somewhere for future use. Then when a new question comes in, we pass only that question through the sentence transformer to get the sentence vector representation and then determine the questions with the highest cosine similarity and surface them as related questions. We can find the nearest neighbours through some nearest neighbours techniques:</p> <ul> <li>ANNOY (Approximate Nearest Neighbours)</li> <li>KNN Elastic Search</li> </ul>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#pass-3-sentence-transformers-training","title":"Pass 3: Sentence Transformers Training","text":"<p>BERT is good at word representations but we want to make a Sentence Transformer that is good with sentence representations. To do this, we fine-tune BERT on any or all of the three sentence related tasks:</p> <ol> <li>Natural Language Inference (NLI)</li> <li>Sentence Text Similarity (STS)</li> <li>Triplet Dataset</li> </ol>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#natural-language-inference-nli","title":"Natural Language Inference (NLI)","text":"Natural Language Inference: Does sentence 1 entails or contradicts sentence 2? If neither, the \u201cneutral\u201d category will should be predicted. <p>NLI is a task that takes in two sentences and determines if sentence 1 entails or contradicts sentence 2 or simply neither. See some examples below:</p> <p>Examples</p> <p>Entailment</p> <ul> <li>Sentence 1: \u201cSay hello to me!\u201d</li> <li>Sentence 2: \u201cGreet me!\u201d</li> </ul> <p>Neutral</p> <ul> <li>Sentence 1: \u201cSay hello to me!\u201d</li> <li>Sentence 2: \u201cTwo people greeting and playing together.\u201d</li> </ul> <p>Contradiction</p> <ul> <li>Sentence 1: \u201cSay hello to me!\u201d</li> <li>Sentence 2: \u201cYou\u2019re ignoring me!\u201d</li> </ul> <p>This allows BERT to understand sentence meanings as a whole. For training NLI, a Siamese network is used. \u201cSiamese\u201d means twins so we have two of the exact same Sentence Transformer networks connected in this fashion.</p> A Siamese Network. <p>If we want to compare two sentences, we pass them through the different BERT networks to get word representations. These word vectors are then combined to create a sentence vector and then concatenate the two sentence vectors and their difference. The output is a softmax classification which can be one of these three classes \u2014 entailment, contradiction or neutral.</p> Concatenating the two sentence vectors and their difference. <p>Note</p> <p>Note that the mean pooling and concatenation look really arbitrary but they were chosen because they yielded the best results than any other strategy \u2014 like choosing max pooling or simply only considering the absolute difference between the vectors instead.</p> <p>During inference time, we only need the Sentence Transformer piece where we get a question and then we get the corresponding sentence vector. This vector is the sentence representation that encodes the meaning of the sentence (very well, hopefully).</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#sentence-text-similarity-sts","title":"Sentence Text Similarity (STS)","text":"<p>Another task we can use to fine-tune BERT to understand sentences is using STS. Given two sentences, output the score of how similar they are.</p> Sentence Text Similarity: How similar is sentence 1 to sentence 2? <p>Just like NLI, this is also trained with a Siamese network. During training, we pass the two sentences to compare through different Sentence Transformers to get these sentence vectors and then compute the cosine similarity between these sentence vectors to get the a value between \\(-1\\) and \\(1\\). These are then compared to an actual labelled similarity rating on a scale of \\(1\\) to \\(5\\) which is normalized to be comparable to the output score. We minimize the squared difference between the two so that the model can be trained.</p> Consine similarity between two sentences."},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#triplet-dataset","title":"Triplet Dataset","text":"<p>A third type of task that we can train Sentence Transformers is using a dataset that has triple of sentences. The main sentence is called the \u201canchor\u201d, the next sentence is a sentence that is \u201crelated\u201d and the last sentence being one that is \u201cunrelated\u201d to the \u201canchor\u201d.</p> Triplet Dataset: One sentence is the anchor, another is a related sentence to the anchor and the other is unrelated. <p>We can quickly make this type of dataset by picking a Wikipedia page, then choosing a sentence to be the \u201canchor\u201d and the next sentence in the same paragraph can be chosen as the \u201crelated\u201d sentence and then choose a sentence from another paragraph as the \u201cunrelated\u201d sentence. See screenshot below for an example.</p> Yellow sentence being the anchor. Blue sentence being the related sentence and pink sentence being the unrelated sentence. <p>The network is a triplet (not siamese, or twins) of the exact same Sentence Transformer architectures. During training, we pass each sentence through a Sentence Transformer to get three sentence vectors; \\(S_{a}\\), \\(S_{+}\\) and \\(S_{-}\\).</p> <p>We want to make sure the distance between the anchor and the related sentence is small and the distance between the anchor and unrelated sentence is large. This is so that the meanings are learned.</p> Loss to minimize in the Triplet dataset."},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#conclusion","title":"Conclusion","text":"<p>Regardless which of the tasks is chosen for training the Sentence Transformers, during inference time, we should be able to pass in some sentences and generate sentence representation vectors that encode the meaning of the sentences very well.</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#pass-4-sentence-transformers-inference","title":"Pass 4: Sentence Transformers Inference","text":"<p>Going back to our Data Science job at Quora, how do we recommend similar questions? Before additional questions are asked, we want to pass in every single question/sentence through the fine-tuned Sentence Transformer to get the corresponding sentence vectors. These vectors are good sentence representations (if fine tuning did not go wrong). These vectors all live in a space also known as the embedding space as previously seen above.</p> <p>Next, when a new question comes in, we pass it through our Sentence Transformer to get the sentence representation or sentence embedding. Next, we determine the cosine similarity between the new question and every other candidate question. Finally, we will return the closest questions list as the related questions.</p> <p>For small datasets, we can determine the cosine similarity for a new question with every other question but it becomes increasingly harder to do when there are hundreds and millions of questions (very common especially on a platform like Quora).</p> Quora Statistics 2024. <p>To solve this issue, there are a couple of algorithms we can use. Spotify uses an Approximate Nearest Neighbours algorithm called ANNOY to recommend music to you. In this case, songs are embedded into vectors.</p> <p>Another way to quickly compute the nearest neighbours is through AWS which has an extremely efficient implementation of the k-Nearest Neighbours algorithm.</p>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#summary","title":"Summary","text":""},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#recurrent-neural-networks","title":"Recurrent Neural Networks","text":"<p>Advantages:</p> <ul> <li>Able to deal with Sequence-to-Sequence problems</li> </ul> <p>Disadvantages:</p> <ul> <li>Slow to train and during inference</li> <li>Do not truly understand context</li> </ul>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#transformers","title":"Transformers","text":"<p>Advantages:</p> <ul> <li>Replace Recurrent units with Attention units, addressing past concerns</li> <li>Solves Sequence-to-Sequence problems</li> </ul> <p>Disadvantages:</p> <ul> <li>Not necessarily complex enough to understand language</li> </ul>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#bert","title":"BERT","text":"<p>Advantages:</p> <ul> <li>Stack of Transformer encoders</li> <li>Complex enough to solve a host of NLP problems</li> </ul> <p>Disadvantages:</p> <ul> <li>Not good with sentence similarity tasks</li> </ul>"},{"location":"blog/2024/06/10/sentence-transformers-for-sentence-similarity/#sentence-bert","title":"Sentence BERT","text":"<p>Advantages:</p> <ul> <li>Fine tunes BERT on Sentence Similarity Tasks, addressing past concerns</li> </ul>"},{"location":"home/contribution_guides/classes_types_and_all/","title":"Classes, Types, and All","text":"<p>This page is a overview on how objects should be documented.</p> <p>A special syntax should be adhered to when labeling objects, attributes, etc. within documentation to improve readability. These special labels are called <code>doculabels</code>.</p> <pre><code>@\u200blabel(&lt;label&gt;)\n</code></pre> <p>Zero width space character</p> <p>To prevent any of the strings in this document from being redered as a <code>doculabel</code>, a zero space character was placed into the string. Do not copy the code in any of the blocks.</p> <p>The following labels can be used, simply type any of the texts below into the rounded brackets (and remove the angled brackets).</p> <ul> <li>@label(class)</li> <li>@label(pipe)</li> <li>@label(service)</li> <li>@label(interface)</li> <li>@label(type)</li> <li>@label(attr)</li> <li>@label(meth)</li> <li>@label(func)</li> <li>@label(private)</li> <li>@label(read only)</li> <li>@label(deprecated)</li> </ul> <p>While they can be rendered anywhere on the page, they should only be used in header elements (H2 and below).</p>"},{"location":"home/contribution_guides/classes_types_and_all/#page-layout","title":"Page Layout","text":"<p>Objects/types/interfaces/etc. should always have the second highest hierarchy, and should never be the highest. Page titles (<code>#</code> H1 tags) should be reserved purely for the name of the page.</p> <p>All objects and attributes (including private, read only, deprecated) should be documented.</p> <p>Below is a very rough example of how a page should be written.</p> Markdown <pre><code>## @\u200blabel(class) MyExampleClass\n\nShort description of my class.\n\n### Attributes\n\n#### @\u200blabel(attr) codeAttributeName\n`attrTypr` and explain what this attribute is for\n\n### Methods\n\n#### @\u200blabel(meth) My Humanised Method Name\n\n    ```\n    myMethodName(arg0:type):type\n    ```\n\nDescription\n: Some verbose reason what this method is for.\n\nParameters\n: `arg0` (`type`): Description of `arg0` and its relation to the method.\n\nReturns\n: `type` and its significance.\n</code></pre> <p>Generally speaking, the following patterns can be followed.</p> <ul> <li>Descriptive sections (e.g. attributes, methods, specific method groups) should be <code>H3</code>.</li> <li>Actual code attributes, methods, and all should be <code>H4</code>.</li> </ul> <p>Note</p> <p>See the example below for a visual example of how a page should look like.</p>"},{"location":"home/contribution_guides/classes_types_and_all/#attributes","title":"Attributes\u200b","text":"<p>All attributes must be labeled, with their respective types. To mark additional <code>doculabels</code>, they must be done in this order.</p> <ol> <li>@label(deprecated)</li> <li>@label(private)</li> <li>@label(read only)</li> <li>@label(attr)</li> </ol> Markdown <pre><code>#### @\u200blabel(attr) myAttribute\n`type` example to show attribute\n\n#### @\u200blabel(private) @\u200blabel(attr) youShouldntUseThisOutside\n`type` an example private attribute\n</code></pre>"},{"location":"home/contribution_guides/classes_types_and_all/#methods-and-functions","title":"Methods and Functions","text":"<p>Methods can be grouped together under the same <code>H3</code> header if they have similar relations.</p> Markdown <pre><code>### Methods related to Apples\n\n#### @\u200blabel(meth) Create apple\n...\n\n#### @\u200blabel(meth) Delete apple\n...\n\n### Methods related to Oranges\n\n#### @\u200blabel(meth) Create orange\n...\n\n#### @\u200blabel(meth) Delete orange\n...\n</code></pre> <p>For each method or function, the following items must be documented for clarity.</p> <ol> <li>Call signature</li> <li>Description</li> <li>Parameters</li> <li>Return type</li> </ol>"},{"location":"home/contribution_guides/classes_types_and_all/#call-signature","title":"Call Signature","text":"<p>This should be documented in a code block in the language the piece of code was written in. If it was written in TypeScript, it should look like this.</p> <pre><code>async function createApple(apple:Apple):Promise&lt;string&gt;\n</code></pre>"},{"location":"home/contribution_guides/classes_types_and_all/#description","title":"Description","text":"<p>A short sentence should be added to give a very summarised brief on what the function or method should do.</p> Markdown <pre><code>Description\n: Creates an apple in the fruit basket.\n</code></pre>"},{"location":"home/contribution_guides/classes_types_and_all/#parameters","title":"Parameters","text":"<p>For each of the parameters, the name, type, and description of it should be given.</p> <p>The syntax should look like this.</p> <pre><code>Parameter\n: `nameOfParam1` (`type`): Description\n: `nameOfParam2` (`type`): Description\n</code></pre> Markdown <pre><code>Parameters\n: `apple` (`Apple`): Creates the `Apple` fruit that should be added to the basket.\n</code></pre>"},{"location":"home/contribution_guides/classes_types_and_all/#returns","title":"Returns","text":"<p>This is particularly important as it outlines what the return type is, and its significance.</p> Markdown <pre><code>Returns\n: `string` Id of the apple created\n</code></pre>"},{"location":"home/contribution_guides/classes_types_and_all/#labelclass-examplefruitbasket","title":"@label(class) ExampleFruitBasket","text":"<p>This is an example of how a rendered class would look like</p>"},{"location":"home/contribution_guides/classes_types_and_all/#attributes_1","title":"Attributes","text":""},{"location":"home/contribution_guides/classes_types_and_all/#labelattr-fruits","title":"@label(attr) fruits","text":"<p><code>Fruit[]</code> an array containing all the fruits in the basket.</p>"},{"location":"home/contribution_guides/classes_types_and_all/#methods-related-to-apples","title":"Methods related to apples","text":""},{"location":"home/contribution_guides/classes_types_and_all/#labelmeth-add-apple","title":"@label(meth) Add apple","text":"<pre><code>addApple(apple:Apple):void\n</code></pre> Description Adds an apple to the fruit basket. Parameters <code>apple</code> (<code>Apple</code>): Apple to be added Returns <code>void</code>"},{"location":"home/contribution_guides/classes_types_and_all/#methods-related-to-oranges","title":"Methods related to oranges","text":""},{"location":"home/contribution_guides/classes_types_and_all/#labelmeth-add-orange","title":"@label(meth) Add Orange","text":"<pre><code>addOrange(orange:Orange):void\n</code></pre> Description Adds an orange to the fruit basket. Parameters <code>orange</code> (<code>Orange</code>): Orange to be added Returns <code>void</code>"},{"location":"home/contribution_guides/classes_types_and_all/#labelmeth-eat-orange-by-id","title":"@label(meth) Eat Orange by Id","text":"<pre><code>async eatOrange(id:string, round:boolean):Promise&lt;number&gt;\n</code></pre> Description Eat and orange and count the number of bites. Parameters <code>id</code> (<code>string</code>): UUID of the <code>Orange</code> to be eaten. <code>round</code> (<code>boolean</code>): Specifies if the <code>Orange</code> must be round. Returns <code>number</code> of bites needed to finish eating the orange"},{"location":"home/contribution_guides/endpoints/","title":"Endpoints","text":"<p>Endpoints are documented with OpenAPI standards.</p> <p>Plugin reference</p> <p>Documentation for the plugin used to render the OpenAPI documentation can be found here.</p>"},{"location":"home/contribution_guides/formatting/","title":"Formatting","text":""},{"location":"home/contribution_guides/formatting/#frontmatter","title":"Frontmatter","text":"<p>Frontmatter is the \"metadata\" section of each markdown page. The following attributes must be present on all pages.</p> <ul> <li><code>updated</code> -- date of which the page was last updated, in the DD-mmm-YYYY format.</li> <li><code>authors</code> -- a string, or a list of strings matching the authors name(s) that contributed to the page.</li> </ul> <p>These are required as the information is used to render the <code>updated</code> and <code>author</code> information at the bottom of the pages (hint: see the bottom of this page).</p> <p>The following code block is an example of how to write the frontmatter at the very top of each markdown file.</p> <pre><code>---\nupdated: 23 July 2024\nauthors: Johnny Tan\n---\n</code></pre> <p>Author attribution</p> <p>The authors.py hook was used in the rendering process of authors.</p>"},{"location":"home/contribution_guides/formatting/#hierarchy-of-headers","title":"Hierarchy of Headers","text":"<p>Headers should reflect the logical hierarchy of the content. They must be used in sequential order, starting from H1 for the main title, then H2 for major subsections, followed by H3 for subtopics within those subsections, and so on. This structure is crucial as it helps in organizing the content clearly and logically, making it easier for readers to follow and understand the flow of information.</p>"},{"location":"home/contribution_guides/introduction/","title":"Introduction","text":"<p>Documentation is crucial as it offers a comprehensive guide for developers to comprehend and maintain software. This is equally vital for newly onboarded developers as well as for long-standing team members. Furthermore, as the codebase grows in size and complexity, the documentation serves as a quick reference for team members.</p>"},{"location":"home/contribution_guides/introduction/#guides","title":"Guides","text":"<ul> <li>Formatting -- Refer to this section for our standard markdown formatting guidelines applicable across all documentation.</li> <li>Endpoints -- Details on how to document endpoints.</li> <li>Classes, types, and all -- This section offers detailed guidelines on preparing technical documentation for various objects and types within our codebase. It serves as a critical resource for accurately and precisely describing the structure and functionalities of our software.</li> </ul>"},{"location":"projects/genai/conversational-assistant/webapp/backend/api/endpoints/","title":"Endpoints","text":"<p>The endpoints below are the endpoints to be implemented.</p> <p>Proposed Endpoints and Data Interactions</p> <p>The endpoints and schema described here are proposed based on discussions between the frontend and backend teams. Exact endpoints name to be defined.</p> <p></p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/introduction/","title":"Introduction","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/introduction/#high-level-dependency","title":"High Level Dependency","text":"<p>The frontend for HealthierME 2.0 is build using Angular v18.</p> Domain Technology Remarks Framework Angular v18 Modularity between components and business logic. Component PrimeNG Large range of components out of the box. Styling TailwindCSS Fast tooling for styling of components. Icons Lucide One of the largest icon library with native support for Angular."},{"location":"projects/genai/conversational-assistant/webapp/frontend/introduction/#philosophy","title":"Philosophy","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/introduction/#data-persistence","title":"Data Persistence","text":"<p>To minimise the technical complexity of maintaining states, all stateful logic is handled on the frontend, allowing the backend to be purely stateless. As such, <code>LocalStorage</code> and <code>IndexedDb</code> stores are used to persist user information. This strategy allows us to make do without an authentication (or user based) system, drastically reducing technical complexity -- particularly important given the short turn around time given to produce a proof-of-concept.</p> <p><code>Message</code>s are persisted in the browser using <code>IndexedDb</code> and are queried by the ID of the profile that is currently being interacted with. This is managed by ChatMessageService.</p> <p>To manage user preferences, <code>LocalStorage</code> was used, and is managed by PreferenceService. Preferences include the chat mode, and Voice Activity Detection (VAD) settings.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/introduction/#software-architecture","title":"Software Architecture","text":"<p>The diagram below shows a very, very, high level overview on how the services and components interact with each other.</p> <p>Warning</p> <p>This diagram does not cover every relation and interaction that has been implemented. It does however give a broad idea of the intention behind the implemented structure and how its abstraction of business logic can be expanded.</p> <p>The implemented logic is more nuanced than depicted, with more components and a few more services.</p> <p>Services can be grouped into two general types, a service to abstract out business logic, Abstraction Service Layer (ASL), and services that are responsible for actionable items, Service Layer (SL).</p> <pre><code>flowchart RL\n    subgraph ui [UI]\n        direction RL\n        voice[[Voice Component]]\n        text[[Text Input Component]]\n    end\n\n    subgraph asl [Abstraction Service Layer]\n        direction RL\n        convoBroker{{Conversation Broker}}\n    end\n\n    subgraph sl [Service Layer]\n        direction RL\n        endpoint([Endpoint Service])\n        vad([Voice Activity Detection Service])\n        chat([Chat Message Service])\n        audio([Audio Service])\n        audioPlayer([Audio Player Service])\n    end\n\n    ui --&gt; asl\n    asl --&gt; sl</code></pre> <p>The ultimate goal of this layered structure was to abstract away business logic from components.</p> <p>For example, to process a voice input:</p> <ol> <li>Voice recording must be started (with or without VAD)</li> <li>An API call must be made</li> <li>The transcribed user message must be persisted</li> <li>The streamed API response must be parsed</li> <li>LLM response must be persisted as a message</li> <li>Audio of the LLM response must be played</li> </ol> <p>By adopting the UI/ASL/SL layer structure, the logic is consolidated into ASL services that can be accessed from other components, encouraging reusability of the business logic and keeping UI components readable and simple to maintain.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/","title":"Audio Player Service","text":"<p>This service is responsible for playing all sounds on the frontend. This includes:</p> <ul> <li>LLM audio response (voice chat)</li> <li>Text to speech</li> </ul>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelservice-audioplayerservice","title":"@label(service) AudioPlayerService","text":"<p>To facilitate audio streaming from LLM voice responses, it implements an audio queue system. Audio blobs are played in the sequence they are added in. This implementation was due to how audio files of the LLM response was received on the frontend.</p> <p>Assumption</p> <p>The current implementation generally assumes that there will only be one source of audio, voice LLM and TTS included.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#attributes","title":"Attributes","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelprivate-labelattr-audioelement","title":"@label(private) @label(attr) audioElement","text":"<p><code>HTMLMediaElementWithCaptureStream</code> source of audio being played.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelprivate-labelattr-queue","title":"@label(private) @label(attr) queue","text":"<p><code>Blob[]</code> contains audio files to be played.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelattr-stream","title":"@label(attr) $stream","text":"<p><code>BehaviorSubject&lt;MediaStream|null&gt;</code> keeping track of the current audio stream. This will be consumed by the waveform visualiser.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelattr-playing","title":"@label(attr) $playing","text":"<p><code>BehaviorSubject&lt;boolean&gt;</code> to keep track of the current playing state.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#methods","title":"Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelprivate-labelmeth-play-next-in-queue","title":"@label(private) @label(meth) Play Next in Queue","text":"<pre><code>private playNextInQueue(): void\n</code></pre> Description This method will play the next audio in the queue."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelmeth-get-audio-stream","title":"@label(meth) Get Audio Stream","text":"<pre><code>getAudioStream(): BehaviorSubject&lt;MediaStream|null&gt;\n</code></pre> Description Public method to retrieve the <code>BehaviorSubject</code> to track the current audio stream source. Returns <code>BehaviorSubject&lt;MediaStream|null&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelmeth-play","title":"@label(meth) Play","text":"<pre><code>play(...blob: Blob[]): void\n</code></pre> Description Method to add an audio file to the queue to be played. Parameters <code>...blob</code> (<code>...Blob[]</code>): Destructed array of <code>Blob</code>s to be played. Will be added to a queue."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelmeth-force-play","title":"@label(meth) Force Play","text":"<pre><code>forcePlayAndReplace(blob: Blob): void\n</code></pre> Description This method is to clear the current queue of audio files, and play the provided <code>Blob</code> audio. Parameters <code>blob</code> (<code>Blob</code>): Audio file to be played"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/audio-player/#labelmeth-stop-and-clear","title":"@label(meth) Stop and Clear","text":"<pre><code>stopAndClear(): void\n</code></pre> Description This method clears the current queue, stops the audio from being played and updates local states."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/","title":"Chat Message Service","text":"<p>This service is meant to handle persistence of conversation.</p> <p>Foot gun</p> <p>The current implementation is a \"foot gun\" implementation that was easy to put together and work for the limited use cases that were laid out. However, there are inheirent drawbacks that might induce silent failures in the expected behavior.</p> <p>Currently, only one chat history (defined by <code>Profile.id</code>) can be tracked at any one point of time. Calling <code>ChatMessageService.load()</code> will drop the reference to previously loaded chat histories. This means that previous <code>BehaviorSubject</code>s tracking the conversation will be orphaned and will not recieve any updates upon changes.</p> <p>How to fix</p> <p>This can be improved by memoizing the loaded chat history into a <code>Record&lt;string, BehaviorSubject&lt;Message[]&gt;</code>, so all <code>BehaviorSubject</code>s can be tracked and updated as necessary. Calling <code>ChatMessageService.load()</code> can then return a reference to the memoized <code>BehaviorSubject</code>. This will allow multiple conversations to be loaded and updated simultaniously.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelservice-chatmessageservice","title":"@label(service) ChatMessageService","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#attributes","title":"Attributes","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelprivate-labelattr-messages","title":"@label(private) @label(attr) $messages","text":"<p><code>BehaviorSubject&lt;Message[]&gt;</code> tracking the currently active chat history.</p> <p>Important</p> <p>See the note above.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelprivate-labelattr-currentprofileid","title":"@label(private) @label(attr) $currentProfileId","text":"<p><code>BehaviorSubject&lt;string&gt;</code> to keep track of the currently loaded conversation. Mainly used to print a warning in console.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#methods","title":"Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelmeth-load-messages","title":"@label(meth) Load Messages","text":"<pre><code>async load(profileId: string): Promise&lt;BehaviorSubject&lt;Message[]&gt;&gt;\n</code></pre> Description Method to load the conversation with a given profile into memory to be tracked for updates. Parameters <code>profileId</code> (<code>string</code>): Profile ID of the conversation to load. Returns <code>Promise&lt;BehaviorSubject&lt;Message[]&gt;&gt;</code> <p>Important</p> <p>See the note above.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelmeth-static-load-messages","title":"@label(meth) Static Load Messages","text":"<pre><code>async staticLoad(profileId: string): Promise&lt;Message[]&gt;\n</code></pre> Description Method to fetch the current existing messages with a given profile. This does not induce any side effects. Parameters <code>profileId</code> (<code>string</code>): ID of the profile to fetch for. Returns <code>Promise&lt;Message[]&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelmeth-insert-message","title":"@label(meth) Insert Message","text":"<pre><code>insert(message: Message): Promise&lt;void&gt;\n</code></pre> Description Method to persist a message in <code>IndexedDb</code>. Parameters <code>message</code> (<code>Message</code>): Message to be persisted Returns <code>Promise&lt;void&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/chat-message/#labelmeth-upsert-message","title":"@label(meth) Upsert Message","text":"<pre><code>upsert(message: Message): Promise&lt;void&gt;\n</code></pre> Description Method to update or create new message for persistence. Parameters <code>message</code> (<code>Message</code>): Message to be updated or created. Returns <code>Promise&lt;void&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/","title":"Conversation Broker Service","text":"<p>This service is responsible for managing interaction between UI components and other services related to chat (and voice) functionality.</p> <p>Isolation of business logic</p> <p>All interaction with voice and chat MUST come through this service. Logic related to all global interaction has been encapsulated into this service, so that UI components can focus on UI states and only UI related logic that responds to changes reflected in this service.</p> <p>This service should reflect the global state of events necessary for UI components.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelservice-convobrokerservice","title":"@label(service) ConvoBrokerService","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#attributes","title":"Attributes","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelattr-recorder","title":"@label(private) @label(attr) recorder","text":"<p><code>AudioRecorder</code> is the object responsible for recording user audio.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelattr-activeprofile","title":"@label(private) @label(attr) activeProfile","text":"<p><code>Profile | undefined</code> tracks the currently active profile. This is updated by a subscription instantiated by the constructor.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelattr-micstate","title":"@label(attr) $micState","text":"<p><code>BehaviorSubject&lt;MicState&gt;</code> is the global controller for the mic state, used to control the UI state of the main mic button on the voice page.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelattr-iswaitingforvoiceapi","title":"@label(attr) $isWaitingForVoiceApi","text":"<p><code>BehaviorSubject&lt;boolean&gt;</code> to track if a response has been made from the backend API regarding voice chat.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#voice-chat-related-methods","title":"Voice Chat Related Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelmeth-initialise-voice-chat","title":"@label(private) @label(meth) Initialise Voice Chat","text":"<pre><code>private async initVoiceChat(): Promise&lt;void&gt;\n</code></pre> Description Method to initialise voice activity detection, and initialise <code>AudioRecorder</code>. It is called in the constructor of the service. This method instantiates the subscription for VAD detection, and contains side effects. <p>VAD is only active in voice mode</p> <p>To prevent undesired VAD, the initialised subscribtion to handle VAD will only trigger side effects when the user is in <code>ChatMode.Voice</code>.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelmeth-start-recording","title":"@label(private) @label(meth) Start Recording","text":"<pre><code>private handleStarteRecording(): void\n</code></pre> Description Method to trigger the start of audio recording."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelmeth-stop-recording","title":"@label(private) @label(meth) Stop Recording","text":"<pre><code>private handleStopRecording(): void\n</code></pre> Description Handle the stopping of recording, and post process the recorded audio. The recorded audio will be sent to the backend as a voice message."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelmeth-play-base64-encoded-audio","title":"@label(private) @label(meth) Play Base64 Encoded Audio","text":"<pre><code>private async playAudioBase64(val:string): Promise&lt;void&gt;\n</code></pre> Description Method to play a base 64 encoded audio. This induces side effects in <code>AudioPlayerService</code>. Parameters <code>val</code> (<code>string</code>): Base 64 encoded audio file."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelprivate-labelmeth-send-voice","title":"@label(private) @label(meth) Send Voice","text":"<pre><code>private async sendVoice(audio: Blob, profile: Profile): Promise&lt;void&gt;\n</code></pre> Description Sends audio blob to the backend for LLM and voice chat functionality; it will handle the responses and updating of states related to voice chat. Side effects include audio player and chat message service. Parameters <code>audio</code> (<code>Blob</code>): Blob of audio recording file. <code>profile</code> (<code>Profile</code>): Profile used in the conversation"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelmeth-mic-button-click","title":"@label(meth) Mic Button Click","text":"<pre><code>handleMicButtonClick(): void\n</code></pre> Description Method used in callbacks when the mic button to trigger audio recording actions has been clicked."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#text-chat-related-methods","title":"Text Chat Related Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/conversation-broker/#labelmeth-send-chat","title":"@label(meth) Send Chat","text":"<pre><code>async sendChat(message: string, profile: Profile): Promise&lt;void&gt;\n</code></pre> Description Method to send a chat message. This will handle the persistence of messages into IndexedDB, and interacting with the backend via the <code>EndpointService</code>. Parameters <code>message</code> (<code>string</code>): User input message <code>profile</code> (<code>Profile</code>): Active profile used in the conversation."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/","title":"Endpoint Service","text":"<p>This service is used to interact with the backend. Understandably, this is the most crucial part in the context of backend frontend integration. Given that (at the point of writing) the endpoints were still evolving, this service served as a abstraction layer, so that the rest of the webapp will not break -- when API endpoints are updated, technically, this is the only service that needs to be updated, technically.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#labelservice-endpointservice","title":"@label(service) EndpointService","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#utility-methods","title":"Utility Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#labelprivate-labelmeth-message-to-api-chat-history","title":"@label(private) @label(meth) Message to Api Chat History","text":"<pre><code>private messageToApiChatHistory(message: Message[]): ApiChatHistory[]\n</code></pre> Description Method to convert <code>Message</code> array into <code>ApiChatHistory</code> format for backend consumption. Parameters <code>message</code> (<code>Message[]</code>): Array of messages to convert. Returns <code>ApiChatHistory[]</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#labelprivate-labelmeth-profile-to-api-profile","title":"@label(private) @label(meth) Profile to Api Profile","text":"<pre><code>private profileToApiProfile(profile: Profile): ApiProfile\n</code></pre> Description Method to convert <code>Profile</code> into <code>ApiProfile</code> format for backend consumption. Parameters <code>profile</code> (<code>Profile</code>) Returns <code>ApiProfile</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#methods","title":"Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#labelmeth-send-voice","title":"@label(meth) Send Voice","text":"<pre><code>async sendVoice(\n    recording: Blob,\n    profile: Profile,\n    history: Message[]\n): Promise&lt;BehaviorSubject&lt;VoiceResponse|null&gt;&gt;\n</code></pre> Description Method to send voice recording to the backend. Parameters <code>recording</code> (<code>Blob</code>): Binary of file recording. <code>profile</code> (<code>Profile</code>): Active profile used in the conversation. <code>history</code> (<code>Message[]</code>): Chat history in the conversation. Returns <code>Promise&lt;BehaviorSubject&lt;VoiceResponse|null&gt;&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/endpoint/#labelmeth-send-chat","title":"@label(meth) Send Chat","text":"<pre><code>async sendChat(\n    message: Message,\n    profile: Profile,\n    history: Message[]\n): Promise&lt;BehaviorSubject&lt;ChatReponse|null&gt;&gt;\n</code></pre> Description Method to send chat (text) message to the backend for processing Parameters <code>message</code> (<code>Message</code>): Chat message from user. <code>profile</code> (<code>Profile</code>): Active profile used in the conversation. <code>history</code> (<code>Message[]</code>): Chat history in the conversation. Returns <code>Promise&lt;BehaviorSubject&lt;ChatResponse|null&gt;&gt;</code>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/preference/","title":"Preference Service","text":"<p>This service handles the user preference across the webapp. It is responsible for persisting these states into local storage and listening to changes to local storage.</p> <ul> <li>Chat Mode</li> <li>Show Live Transcription</li> <li>Voice Interrupt</li> <li>Detect Voice Start</li> <li>Detect Voice End</li> </ul>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/","title":"Voice Activity Detection","text":"<p>This service is used to handle Voice Activity Detection (VAD).</p> <p>The current implementation uses the browser's <code>SpeechRecognition</code> API to detect speech. Transcription is still handled by the backend due to the following reasons.</p> <ol> <li>Multi language support. The browser requires the user to specify the language; leaving this capability to the backend allows us to automatically detect the user's language.</li> <li>Limited browser support. Not all browsers support this API (e.g. Arc, Firefox), leaving this to our own API allows us to have full control and simplify the process of Speech to Text (STT) transcription.</li> </ol> <p>Fallback required</p> <p>A fall back VAD detector needs to be implemented in the event of an unsupported browser. This method can be done using live transcription from our backend, or using alternative methods (e.g. volume levels).</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelservice-vadservice","title":"@label(service) VadService","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#attributes","title":"Attributes","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelprivate-endtimeout","title":"@label(private) endTimeout","text":"<p><code>number</code> to keep track of timeout calls that are used in <code>VadService.start()</code> to emit an event when speech has ended.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelprivate-speech","title":"@label(private) $speech","text":"<p><code>Subject&lt;void&gt;</code> emits an event whenever speech has been detected; fired through a subscription in <code>VadService.configSpeechRecognition()</code> as a side effect.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelprivate-recognition","title":"@label(private) recognition","text":"<p><code>SpeechRecognition</code> object from the browser.</p>"},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#methods","title":"Methods","text":""},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelprivate-labelmeth-configure","title":"@label(private) @label(meth) Configure","text":"<pre><code>private configSpeechRecofnition(): void\n</code></pre> Description Method to instantiate the speech recognition object. Called in the constructor."},{"location":"projects/genai/conversational-assistant/webapp/frontend/services/voice-activity-detection/#labelmeth-start","title":"@label(meth) Start","text":"<pre><code>start(): Observable&lt;VoiceActivity&gt;\n</code></pre> Description Method to get an observable to keep track of VAD activity. Returns <code>Observable&lt;VoiceActivity&gt;</code>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/","title":"Embeddings (Traditional Statistical Vector-based Embeddings)","text":"In\u00a0[1]: Copied! <pre>import ast\nimport os\nimport pickle\nimport random\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom alive_progress import alive_bar\nfrom scipy.sparse import csr_matrix\nfrom sklearn.decomposition import LatentDirichletAllocation, TruncatedSVD\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics.pairwise import (\n    cosine_similarity,\n    euclidean_distances,\n    manhattan_distances,\n)\nfrom sklearn.pipeline import make_pipeline\n</pre> import ast import os import pickle import random  import matplotlib.pyplot as plt import numpy as np import pandas as pd import seaborn as sns from alive_progress import alive_bar from scipy.sparse import csr_matrix from sklearn.decomposition import LatentDirichletAllocation, TruncatedSVD from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer from sklearn.metrics.pairwise import (     cosine_similarity,     euclidean_distances,     manhattan_distances, ) from sklearn.pipeline import make_pipeline In\u00a0[2]: Copied! <pre>statistical_methods = {\n    \"bow\": (CountVectorizer,),\n    \"tfidf\": (TfidfVectorizer,),\n    \"lsa\": (TfidfVectorizer, TruncatedSVD),\n    \"lda\": (CountVectorizer, LatentDirichletAllocation),\n}\n\nsimilarity_metrics = {\n    \"cosine\": cosine_similarity,\n    \"euclidean\": euclidean_distances,\n    \"dot\": np.dot,\n    \"manhattan\": manhattan_distances,\n}\n</pre> statistical_methods = {     \"bow\": (CountVectorizer,),     \"tfidf\": (TfidfVectorizer,),     \"lsa\": (TfidfVectorizer, TruncatedSVD),     \"lda\": (CountVectorizer, LatentDirichletAllocation), }  similarity_metrics = {     \"cosine\": cosine_similarity,     \"euclidean\": euclidean_distances,     \"dot\": np.dot,     \"manhattan\": manhattan_distances, } In\u00a0[3]: parameters Copied! <pre># Parameters\nCONTRIBUTOR: str = \"Health Promotion Board\"\nCATEGORY: str = \"live-healthy\"\nMETHOD: str = \"bow\"\nKWARGS: dict = {\"max_features\": 384}\nMETRIC: str = \"cosine\"\n</pre> # Parameters CONTRIBUTOR: str = \"Health Promotion Board\" CATEGORY: str = \"live-healthy\" METHOD: str = \"bow\" KWARGS: dict = {\"max_features\": 384} METRIC: str = \"cosine\" In\u00a0[4]: injected-parameters Copied! <pre># Parameters\nMETHOD = \"tfidf\"\nKWARGS = {\"max_features\": 384}\nMETRIC = \"cosine\"\n</pre> # Parameters METHOD = \"tfidf\" KWARGS = {\"max_features\": 384} METRIC = \"cosine\" In\u00a0[5]: Copied! <pre>CLEAN_DATA_PATH = os.path.join(\"..\", \"data\", \"healthhub_small_clean\")\n\nCLEANED_CHUNK_ID_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_chunk_id_list_small_clean.pkl\"\n)\nCLEANED_SOURCE_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_source_list_small_clean.pkl\"\n)\nCLEANED_DOMAIN_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_domain_list_small_clean.pkl\"\n)\nCLEANED_TITLE_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_title_list_small_clean.pkl\"\n)\nCLEANED_CONTRIBUTOR_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_contributor_list_small_clean.pkl\"\n)\nCLEANED_CONTENT_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_content_list_small_clean.pkl\"\n)\nCLEANED_CATEGORY_LIST_PATH = os.path.join(\n    CLEAN_DATA_PATH, \"healthhub_category_list_small_clean.pkl\"\n)\n\nOUTPUT_CM_PATH = os.path.join(\n    \"..\",\n    \"artifacts\",\n    \"outputs\",\n    f\"{METHOD}_{'_'.join([f'{k}_{v}' for k, v in KWARGS.items()])}_{METRIC}_cm.png\",\n)\nOUTPUT_SIM_PATH = os.path.join(\n    \"..\",\n    \"artifacts\",\n    \"outputs\",\n    \"statistical_vector_based_embeddings_similarity_scores.xlsx\",\n)\n\nSHEET_NAME = f\"{METHOD}_{METRIC}\"\n</pre> CLEAN_DATA_PATH = os.path.join(\"..\", \"data\", \"healthhub_small_clean\")  CLEANED_CHUNK_ID_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_chunk_id_list_small_clean.pkl\" ) CLEANED_SOURCE_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_source_list_small_clean.pkl\" ) CLEANED_DOMAIN_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_domain_list_small_clean.pkl\" ) CLEANED_TITLE_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_title_list_small_clean.pkl\" ) CLEANED_CONTRIBUTOR_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_contributor_list_small_clean.pkl\" ) CLEANED_CONTENT_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_content_list_small_clean.pkl\" ) CLEANED_CATEGORY_LIST_PATH = os.path.join(     CLEAN_DATA_PATH, \"healthhub_category_list_small_clean.pkl\" )  OUTPUT_CM_PATH = os.path.join(     \"..\",     \"artifacts\",     \"outputs\",     f\"{METHOD}_{'_'.join([f'{k}_{v}' for k, v in KWARGS.items()])}_{METRIC}_cm.png\", ) OUTPUT_SIM_PATH = os.path.join(     \"..\",     \"artifacts\",     \"outputs\",     \"statistical_vector_based_embeddings_similarity_scores.xlsx\", )  SHEET_NAME = f\"{METHOD}_{METRIC}\" In\u00a0[6]: Copied! <pre>with open(CLEANED_CHUNK_ID_LIST_PATH, \"rb\") as file:\n    loaded_chunk_id = pickle.load(file)  # list of chunk ids\n\nwith open(CLEANED_SOURCE_LIST_PATH, \"rb\") as file:\n    loaded_source = pickle.load(file)  # list of hyperlinks\n\nwith open(CLEANED_DOMAIN_LIST_PATH, \"rb\") as file:\n    loaded_domain = pickle.load(file)  # website domain\n\nwith open(CLEANED_TITLE_LIST_PATH, \"rb\") as file:\n    loaded_title = pickle.load(file)  # list of titles each chunk belongs to\n\nwith open(CLEANED_CONTRIBUTOR_LIST_PATH, \"rb\") as file:\n    loaded_contributor = pickle.load(file)  # list of contributors\n\nwith open(CLEANED_CONTENT_LIST_PATH, \"rb\") as file:\n    loaded_content = pickle.load(file)  # list of chunks of contents\n\nwith open(CLEANED_CATEGORY_LIST_PATH, \"rb\") as file:\n    loaded_category = pickle.load(file)  # list of categories\n</pre> with open(CLEANED_CHUNK_ID_LIST_PATH, \"rb\") as file:     loaded_chunk_id = pickle.load(file)  # list of chunk ids  with open(CLEANED_SOURCE_LIST_PATH, \"rb\") as file:     loaded_source = pickle.load(file)  # list of hyperlinks  with open(CLEANED_DOMAIN_LIST_PATH, \"rb\") as file:     loaded_domain = pickle.load(file)  # website domain  with open(CLEANED_TITLE_LIST_PATH, \"rb\") as file:     loaded_title = pickle.load(file)  # list of titles each chunk belongs to  with open(CLEANED_CONTRIBUTOR_LIST_PATH, \"rb\") as file:     loaded_contributor = pickle.load(file)  # list of contributors  with open(CLEANED_CONTENT_LIST_PATH, \"rb\") as file:     loaded_content = pickle.load(file)  # list of chunks of contents  with open(CLEANED_CATEGORY_LIST_PATH, \"rb\") as file:     loaded_category = pickle.load(file)  # list of categories In\u00a0[7]: Copied! <pre>df = pd.DataFrame(\n    {\n        \"chunk_id\": loaded_chunk_id,\n        \"doc_source\": loaded_source,\n        \"doc_domain\": loaded_domain,\n        \"doc_title\": loaded_title,\n        \"contributor\": loaded_contributor,\n        \"text\": loaded_content,\n        \"category\": loaded_category,\n    }\n)\n\ndf = df[df[\"contributor\"] == CONTRIBUTOR].reset_index(drop=True)\ndf = df[df[\"doc_source\"].apply(lambda x: x.split(\"/\")[3] == CATEGORY)].reset_index(\n    drop=True\n)\n\nprint(df.shape)\ndf.head()\n</pre> df = pd.DataFrame(     {         \"chunk_id\": loaded_chunk_id,         \"doc_source\": loaded_source,         \"doc_domain\": loaded_domain,         \"doc_title\": loaded_title,         \"contributor\": loaded_contributor,         \"text\": loaded_content,         \"category\": loaded_category,     } )  df = df[df[\"contributor\"] == CONTRIBUTOR].reset_index(drop=True) df = df[df[\"doc_source\"].apply(lambda x: x.split(\"/\")[3] == CATEGORY)].reset_index(     drop=True )  print(df.shape) df.head() <pre>(2008, 7)\n</pre> Out[7]: chunk_id doc_source doc_domain doc_title contributor text category 0 web_crawl_c3d4d37b-eb92-5349-9d5c-81f2e38e1cfb_1 https://www.healthhub.sg/live-healthy/building... healthhub.sg buildingasupportivenetwork Health Promotion Board Building Supportive Network Family Friends Hum... live-healthy 1 web_crawl_c3d4d37b-eb92-5349-9d5c-81f2e38e1cfb_2 https://www.healthhub.sg/live-healthy/building... healthhub.sg buildingasupportivenetwork Health Promotion Board Therefore , advisable number strong relationsh... live-healthy 2 web_crawl_c3d4d37b-eb92-5349-9d5c-81f2e38e1cfb_3 https://www.healthhub.sg/live-healthy/building... healthhub.sg buildingasupportivenetwork Health Promotion Board Pick new hobby get know like-minded people enj... live-healthy 3 web_crawl_2b12fdec-76a5-55a7-ad1e-d0ae2b29c864_1 https://www.healthhub.sg/live-healthy/mental_h... healthhub.sg mental_health_emotional_intelligence_pdf Health Promotion Board Develop Emotional Intelligence Give Mental Wel... live-healthy 4 web_crawl_2b12fdec-76a5-55a7-ad1e-d0ae2b29c864_2 https://www.healthhub.sg/live-healthy/mental_h... healthhub.sg mental_health_emotional_intelligence_pdf Health Promotion Board Learn recognise early signs stress different e... live-healthy In\u00a0[8]: Copied! <pre>df[\"combined_text\"] = None\n\nwith alive_bar(df[\"doc_source\"].nunique(), force_tty=True) as bar:\n    for source in df[\"doc_source\"].unique():\n        combined_text = \" \".join(df.query(\"doc_source == @source\")[\"text\"].values)\n        indices = df.query(\"doc_source == @source\").index.values\n        df.loc[indices, \"combined_text\"] = combined_text\n        bar()\n\n# After combining chunks one article, remove all duplicate articles\ndf = df[~df[\"doc_source\"].duplicated()].reset_index(drop=True)\ndf[\"chunk_id\"] = df[\"chunk_id\"].apply(lambda x: \"_\".join(x.split(\"_\")[:-1]))\n\ndf\n</pre> df[\"combined_text\"] = None  with alive_bar(df[\"doc_source\"].nunique(), force_tty=True) as bar:     for source in df[\"doc_source\"].unique():         combined_text = \" \".join(df.query(\"doc_source == @source\")[\"text\"].values)         indices = df.query(\"doc_source == @source\").index.values         df.loc[indices, \"combined_text\"] = combined_text         bar()  # After combining chunks one article, remove all duplicate articles df = df[~df[\"doc_source\"].duplicated()].reset_index(drop=True) df[\"chunk_id\"] = df[\"chunk_id\"].apply(lambda x: \"_\".join(x.split(\"_\")[:-1]))  df <pre>\r\n|                                        | \u2581\u2583\u2585 0/588 [0%] in 0s (~0s, 0.0/s) </pre> <pre>\r\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                        | \u2582\u2584\u2586 228/588 [39%] in 0s (~0s, 859.8/s</pre> <pre>\r\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                     | \u2583\u2585\u2587 277/588 [47%] in 0s (~0s, 860.4/s</pre> <pre>\r\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e               | \u2584\u2586\u2588 356/588 [61%] in 0s (~0s, 862.3/s</pre> <pre>\r\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | \u2585\u2587\u2587 452/588 [77%] in 1s (~0s, 864.8/s</pre> <pre>\r\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 588/588 [100%] in 0.7s (868.09/s)    </pre> <pre>\n</pre> Out[8]: chunk_id doc_source doc_domain doc_title contributor text category combined_text 0 web_crawl_c3d4d37b-eb92-5349-9d5c-81f2e38e1cfb https://www.healthhub.sg/live-healthy/building... healthhub.sg buildingasupportivenetwork Health Promotion Board Building Supportive Network Family Friends Hum... live-healthy Building Supportive Network Family Friends Hum... 1 web_crawl_2b12fdec-76a5-55a7-ad1e-d0ae2b29c864 https://www.healthhub.sg/live-healthy/mental_h... healthhub.sg mental_health_emotional_intelligence_pdf Health Promotion Board Develop Emotional Intelligence Give Mental Wel... live-healthy Develop Emotional Intelligence Give Mental Wel... 2 web_crawl_5b278435-1c29-53b2-830b-aafd2970dd38 https://www.healthhub.sg/live-healthy/meal-ide... healthhub.sg meal-ideas-month-9 Health Promotion Board Meal Ideas : Month 9 Meal ideas 9-month-old ba... live-healthy Meal Ideas : Month 9 Meal ideas 9-month-old ba... 3 web_crawl_fb7167c6-3c24-563c-94fd-eb3c7a5ddb1d https://www.healthhub.sg/live-healthy/soya_uni... healthhub.sg soya_unique_plant_protein Health Promotion Board Soya Bean \u2014 Unique Plant Protein Soya bean pro... live-healthy Soya Bean \u2014 Unique Plant Protein Soya bean pro... 4 web_crawl_d10afa2b-f15e-5f7d-afd6-484d90f7121b https://www.healthhub.sg/live-healthy/nutritio... healthhub.sg nutrition-for-preschoolers-61-72-months Health Promotion Board Nutrition Pre-Schoolers ( Months 61-72 ) guide... live-healthy Nutrition Pre-Schoolers ( Months 61-72 ) guide... ... ... ... ... ... ... ... ... ... 583 web_crawl_2c6eb646-9d49-50a3-a419-4443f4a79dfa https://www.healthhub.sg/live-healthy/slip-ups... healthhub.sg slip-ups-dos-and-donts Health Promotion Board Slip-Ups : Dos Dont 's Slipped picked cigarett... live-healthy Slip-Ups : Dos Dont 's Slipped picked cigarett... 584 web_crawl_d5a43397-6dc5-5162-bbe5-244de8e7773f https://www.healthhub.sg/live-healthy/is-my-ba... healthhub.sg is-my-baby%27s-spit-up-normal Health Promotion Board Q &amp; : Baby 's Spit-Up Normal ? Find baby spits... live-healthy Q &amp; : Baby 's Spit-Up Normal ? Find baby spits... 585 web_crawl_7aec5e06-ea47-5f02-9fec-0ac89f36aa7a https://www.healthhub.sg/live-healthy/awkward_... healthhub.sg awkward_turtle Health Promotion Board Make Friends Better Mental Well-being Overcome... live-healthy Make Friends Better Mental Well-being Overcome... 586 web_crawl_49964963-3f83-5d82-9495-b130cc1e629f https://www.healthhub.sg/live-healthy/what-a-w... healthhub.sg what-a-weaning-baby-needs-for-strong-immunity Health Promotion Board Weaning Baby Needs Strong Immunity baby reache... live-healthy Weaning Baby Needs Strong Immunity baby reache... 587 web_crawl_be20701c-e418-544a-bd58-6c97c436a128 https://www.healthhub.sg/live-healthy/warnings... healthhub.sg warningsignsof_dementia Health Promotion Board Warning Signs Dementia Dementia normal part ag... live-healthy Warning Signs Dementia Dementia normal part ag... <p>588 rows \u00d7 8 columns</p> In\u00a0[9]: Copied! <pre>ground_df = pd.read_excel(\n    os.path.join(\n        \"..\", \"data\", \"Synapxe Content Prioritisation - Live Healthy_020724.xlsx\"\n    ),\n    sheet_name=\"All Live Healthy\",\n    index_col=False,\n)\n\nground_truth_col = \"Combine Group ID\"\n\nground_df = ground_df[ground_df[ground_truth_col].notna()].reset_index(drop=True)\nground_df[ground_truth_col] = ground_df[ground_truth_col].astype(int)\n\n# Merge dfs so we can get the document title and content\nmerge_df = pd.merge(ground_df, df, how=\"inner\", left_on=\"URL\", right_on=\"doc_source\")\n\ncol_of_int = [\"Combine Group ID\", \"Page Title\", \"Meta Description\", *df.columns]\nfinal_df = merge_df[col_of_int]\n\nprint(final_df.shape)\nfinal_df.head()\n</pre> ground_df = pd.read_excel(     os.path.join(         \"..\", \"data\", \"Synapxe Content Prioritisation - Live Healthy_020724.xlsx\"     ),     sheet_name=\"All Live Healthy\",     index_col=False, )  ground_truth_col = \"Combine Group ID\"  ground_df = ground_df[ground_df[ground_truth_col].notna()].reset_index(drop=True) ground_df[ground_truth_col] = ground_df[ground_truth_col].astype(int)  # Merge dfs so we can get the document title and content merge_df = pd.merge(ground_df, df, how=\"inner\", left_on=\"URL\", right_on=\"doc_source\")  col_of_int = [\"Combine Group ID\", \"Page Title\", \"Meta Description\", *df.columns] final_df = merge_df[col_of_int]  print(final_df.shape) final_df.head() <pre>(187, 11)\n</pre> Out[9]: Combine Group ID Page Title Meta Description chunk_id doc_source doc_domain doc_title contributor text category combined_text 0 1 Getting ready for solids You have breastfed your baby for 6 months and ... web_crawl_d94a2444-07ef-5a9a-8929-db35c7844303 https://www.healthhub.sg/live-healthy/baby-get... healthhub.sg baby-getting-ready-for-solids Health Promotion Board Getting ready solids breastfed baby 6 months w... live-healthy Getting ready solids breastfed baby 6 months w... 1 1 Getting Your Baby Started on Solids Your baby has reached the 6-month mark, and yo... web_crawl_b386cb40-ea43-5467-b40e-dff45bcf5a69 https://www.healthhub.sg/live-healthy/getting-... healthhub.sg getting-baby-started-on-solids Health Promotion Board Getting Baby Started Solids baby reached 6-mon... live-healthy Getting Baby Started Solids baby reached 6-mon... 2 1 Feeding Your Baby Solid Food: Baby's First Foo... At six months of age, your baby will soon be r... web_crawl_8c111fe7-a8e1-579e-bf15-b726950b181d https://www.healthhub.sg/live-healthy/babys_fi... healthhub.sg babys_first_food_journey Health Promotion Board Feeding Baby Solid Food : Baby 's First Food J... live-healthy Feeding Baby Solid Food : Baby 's First Food J... 3 1 Ready, Steady, Wean! Why, When and How to Move... Breast milk provides all the nourishment your ... web_crawl_51124591-ac9f-5670-b05b-45d0d4352e08 https://www.healthhub.sg/live-healthy/ready-st... healthhub.sg Ready-Steady-Wean-How-To-Move-Baby-Onto-Solids Health Promotion Board Ready , Steady , Wean ! , Move Baby onto Solid... live-healthy Ready , Steady , Wean ! , Move Baby onto Solid... 4 1 What A Weaning Baby Needs For Strong Immunity When your baby reaches 6 months of age, you ca... web_crawl_49964963-3f83-5d82-9495-b130cc1e629f https://www.healthhub.sg/live-healthy/what-a-w... healthhub.sg what-a-weaning-baby-needs-for-strong-immunity Health Promotion Board Weaning Baby Needs Strong Immunity baby reache... live-healthy Weaning Baby Needs Strong Immunity baby reache... In\u00a0[10]: Copied! <pre>def generate_statistical_embeddings(\n    corpus: list[str], method: str, **kwargs: dict\n) -&gt; tuple[csr_matrix, pd.DataFrame] | tuple[np.ndarray, None]:\n    components = statistical_methods.get(method, None)\n\n    df = None\n\n    if len(components) == 1 and components is not None:\n        vectorizer = components[0](**kwargs)\n        print(vectorizer)\n        X = vectorizer.fit_transform(corpus)\n\n        # Get words from stopwords array to use as headers\n        feature_names = vectorizer.get_feature_names_out()\n        # Combine header titles and weights\n        df = pd.DataFrame(X.toarray(), columns=feature_names)\n\n    elif len(components) &gt; 1 and components is not None:\n        pipeline = make_pipeline(components[0](), components[1](**kwargs))\n        print(pipeline)\n        X = pipeline.fit_transform(corpus)\n\n    return X, df\n</pre> def generate_statistical_embeddings(     corpus: list[str], method: str, **kwargs: dict ) -&gt; tuple[csr_matrix, pd.DataFrame] | tuple[np.ndarray, None]:     components = statistical_methods.get(method, None)      df = None      if len(components) == 1 and components is not None:         vectorizer = components[0](**kwargs)         print(vectorizer)         X = vectorizer.fit_transform(corpus)          # Get words from stopwords array to use as headers         feature_names = vectorizer.get_feature_names_out()         # Combine header titles and weights         df = pd.DataFrame(X.toarray(), columns=feature_names)      elif len(components) &gt; 1 and components is not None:         pipeline = make_pipeline(components[0](), components[1](**kwargs))         print(pipeline)         X = pipeline.fit_transform(corpus)      return X, df In\u00a0[11]: Copied! <pre>X, mat_df = generate_statistical_embeddings(\n    final_df[\"combined_text\"].to_list(), method=METHOD, **KWARGS\n)\n\nprint(X.shape)  # (num_docs, emb_dim)\nif mat_df is not None:\n    # ruff: noqa: F821\n    display(mat_df.head(7))\n</pre> X, mat_df = generate_statistical_embeddings(     final_df[\"combined_text\"].to_list(), method=METHOD, **KWARGS )  print(X.shape)  # (num_docs, emb_dim) if mat_df is not None:     # ruff: noqa: F821     display(mat_df.head(7)) <pre>TfidfVectorizer(max_features=384)\n(187, 384)\n</pre> 10 12 20 2016 30 able active activities activity add ... within without work workout worth would www year years young 0 0.055499 0.074914 0.0 0.000000 0.0 0.015439 0.0 0.0 0.000000 0.015860 ... 0.000000 0.013875 0.013262 0.0 0.0 0.000000 0.000000 0.000000 0.000000 0.000000 1 0.047750 0.075197 0.0 0.000000 0.0 0.008856 0.0 0.0 0.000000 0.027292 ... 0.000000 0.007958 0.015214 0.0 0.0 0.008779 0.000000 0.009446 0.000000 0.000000 2 0.012471 0.016833 0.0 0.000000 0.0 0.000000 0.0 0.0 0.000000 0.071277 ... 0.000000 0.000000 0.000000 0.0 0.0 0.000000 0.000000 0.000000 0.028775 0.000000 3 0.000000 0.000000 0.0 0.000000 0.0 0.057740 0.0 0.0 0.000000 0.000000 ... 0.000000 0.025945 0.000000 0.0 0.0 0.000000 0.000000 0.061588 0.000000 0.000000 4 0.000000 0.107138 0.0 0.000000 0.0 0.000000 0.0 0.0 0.037116 0.000000 ... 0.047565 0.000000 0.018967 0.0 0.0 0.109440 0.025866 0.000000 0.045785 0.047565 5 0.000000 0.000000 0.0 0.000000 0.0 0.000000 0.0 0.0 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.0 0.0 0.000000 0.000000 0.283931 0.000000 0.000000 6 0.000000 0.000000 0.0 0.033736 0.0 0.000000 0.0 0.0 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.0 0.0 0.000000 0.029717 0.000000 0.000000 0.000000 <p>7 rows \u00d7 384 columns</p> In\u00a0[12]: Copied! <pre># Compute similarity matrix\nsimilarity_metric = similarity_metrics[METRIC]\n\nif METRIC == \"dot\":\n    similarities = X @ X.T\n    if type(similarities) != np.ndarray:\n        similarities = similarities.toarray()\nelif METRIC in [\"euclidean\", \"manhattan\"]:\n    distances = similarity_metric(X, X)\n    similarities = 1 / (\n        1 + distances\n    )  # https://stats.stackexchange.com/questions/158279/how-i-can-convert-distance-euclidean-to-similarity-score#:~:text=If,is%20commonly%20used.\nelse:\n    similarities = similarity_metric(X, X)\n\nprint(similarities.shape)  # (num_docs, num_docs)\n</pre> # Compute similarity matrix similarity_metric = similarity_metrics[METRIC]  if METRIC == \"dot\":     similarities = X @ X.T     if type(similarities) != np.ndarray:         similarities = similarities.toarray() elif METRIC in [\"euclidean\", \"manhattan\"]:     distances = similarity_metric(X, X)     similarities = 1 / (         1 + distances     )  # https://stats.stackexchange.com/questions/158279/how-i-can-convert-distance-euclidean-to-similarity-score#:~:text=If,is%20commonly%20used. else:     similarities = similarity_metric(X, X)  print(similarities.shape)  # (num_docs, num_docs) <pre>(187, 187)\n</pre> In\u00a0[\u00a0]: Copied! <pre>if METHOD == \"bow\" and METRIC == \"dot\":\n    similarities = np.divide(similarities, similarities.max(), casting=\"same_kind\")\n</pre> if METHOD == \"bow\" and METRIC == \"dot\":     similarities = np.divide(similarities, similarities.max(), casting=\"same_kind\") In\u00a0[13]: Copied! <pre># Function to darken a hex color\n\n\ndef darken_hex_color(hex_color, factor=0.7):\n    # Ensure factor is between 0 and 1\n    factor = max(0, min(1, factor))\n\n    # Convert hex color to RGB\n    r = int(hex_color[1:3], 16)\n    g = int(hex_color[3:5], 16)\n    b = int(hex_color[5:7], 16)\n\n    # Darken the color\n    r = int(r * factor)\n    g = int(g * factor)\n    b = int(b * factor)\n\n    # Convert RGB back to hex\n    darkened_color = f\"#{r:02x}{g:02x}{b:02x}\".upper()\n\n    return darkened_color\n</pre> # Function to darken a hex color   def darken_hex_color(hex_color, factor=0.7):     # Ensure factor is between 0 and 1     factor = max(0, min(1, factor))      # Convert hex color to RGB     r = int(hex_color[1:3], 16)     g = int(hex_color[3:5], 16)     b = int(hex_color[5:7], 16)      # Darken the color     r = int(r * factor)     g = int(g * factor)     b = int(b * factor)      # Convert RGB back to hex     darkened_color = f\"#{r:02x}{g:02x}{b:02x}\".upper()      return darkened_color In\u00a0[14]: Copied! <pre>article_titles = final_df.loc[:, \"doc_title\"].tolist()\n\nstart = 0\nend = 20\n\ncutoff_similarities = similarities[start:end, start:end]\ncutoff_article_titles = article_titles[start:end]\n\n# Generate random colours\nhexadecimal_alphabets = \"0123456789ABCDEF\"\nground_truth_cluster_ids = final_df.iloc[start:end][\"Combine Group ID\"].unique()\ncolours = {\n    id: darken_hex_color(\n        \"#\" + \"\".join([random.choice(hexadecimal_alphabets) for _ in range(6)])\n    )\n    for id in ground_truth_cluster_ids\n}\n\n\nplt.subplots(figsize=(20, 18))\nax = sns.heatmap(\n    cutoff_similarities,\n    xticklabels=cutoff_article_titles,\n    yticklabels=cutoff_article_titles,\n    annot=True,\n    fmt=\".2g\",\n)\n\nfor x_tick_label, y_tick_label in zip(\n    ax.axes.get_xticklabels(), ax.axes.get_yticklabels()\n):\n\n    ground_truth_cluster_id = (\n        final_df[final_df[\"doc_title\"] == y_tick_label.get_text()][\"Combine Group ID\"]\n        .values[0]\n        .astype(int)\n    )\n    colour = colours[ground_truth_cluster_id]\n    y_tick_label.set_color(colour)\n    x_tick_label.set_color(colour)\n\nax.set_title(f\"Method: {METHOD}, kwargs: {KWARGS}, metric: {METRIC}\", fontsize=20)\nplt.tight_layout()\nplt.show()\n</pre> article_titles = final_df.loc[:, \"doc_title\"].tolist()  start = 0 end = 20  cutoff_similarities = similarities[start:end, start:end] cutoff_article_titles = article_titles[start:end]  # Generate random colours hexadecimal_alphabets = \"0123456789ABCDEF\" ground_truth_cluster_ids = final_df.iloc[start:end][\"Combine Group ID\"].unique() colours = {     id: darken_hex_color(         \"#\" + \"\".join([random.choice(hexadecimal_alphabets) for _ in range(6)])     )     for id in ground_truth_cluster_ids }   plt.subplots(figsize=(20, 18)) ax = sns.heatmap(     cutoff_similarities,     xticklabels=cutoff_article_titles,     yticklabels=cutoff_article_titles,     annot=True,     fmt=\".2g\", )  for x_tick_label, y_tick_label in zip(     ax.axes.get_xticklabels(), ax.axes.get_yticklabels() ):      ground_truth_cluster_id = (         final_df[final_df[\"doc_title\"] == y_tick_label.get_text()][\"Combine Group ID\"]         .values[0]         .astype(int)     )     colour = colours[ground_truth_cluster_id]     y_tick_label.set_color(colour)     x_tick_label.set_color(colour)  ax.set_title(f\"Method: {METHOD}, kwargs: {KWARGS}, metric: {METRIC}\", fontsize=20) plt.tight_layout() plt.show() In\u00a0[15]: Copied! <pre>ax.figure.savefig(OUTPUT_CM_PATH, dpi=400)\n</pre> ax.figure.savefig(OUTPUT_CM_PATH, dpi=400) In\u00a0[16]: Copied! <pre>sim_df = pd.DataFrame(similarities)\n\nsim_df.index = merge_df[\"Page Title\"]\nsim_df.columns = merge_df[\"Page Title\"]\n\n# Store kwwargs as index name\nsim_df.index.name = str(KWARGS)\nsim_df.columns.name = None\n</pre> sim_df = pd.DataFrame(similarities)  sim_df.index = merge_df[\"Page Title\"] sim_df.columns = merge_df[\"Page Title\"]  # Store kwwargs as index name sim_df.index.name = str(KWARGS) sim_df.columns.name = None In\u00a0[17]: Copied! <pre>if os.path.isfile(OUTPUT_SIM_PATH):\n    with pd.ExcelWriter(\n        OUTPUT_SIM_PATH, mode=\"a\", engine=\"openpyxl\", if_sheet_exists=\"replace\"\n    ) as writer:  # Open with pd.ExcelWriter\n        sim_df.to_excel(writer, sheet_name=SHEET_NAME)\nelse:\n    sim_df.to_excel(OUTPUT_SIM_PATH, sheet_name=SHEET_NAME)\n</pre> if os.path.isfile(OUTPUT_SIM_PATH):     with pd.ExcelWriter(         OUTPUT_SIM_PATH, mode=\"a\", engine=\"openpyxl\", if_sheet_exists=\"replace\"     ) as writer:  # Open with pd.ExcelWriter         sim_df.to_excel(writer, sheet_name=SHEET_NAME) else:     sim_df.to_excel(OUTPUT_SIM_PATH, sheet_name=SHEET_NAME) In\u00a0[18]: Copied! <pre>file = pd.ExcelFile(OUTPUT_SIM_PATH)\nprint(file.sheet_names)\n</pre> file = pd.ExcelFile(OUTPUT_SIM_PATH) print(file.sheet_names) <pre>['bow_cosine', 'bow_euclidean', 'bow_dot', 'bow_manhattan', 'tfidf_cosine']\n</pre> In\u00a0[19]: Copied! <pre>tmp = pd.read_excel(OUTPUT_SIM_PATH, sheet_name=SHEET_NAME)\nprint(ast.literal_eval(tmp.columns[0]))\n</pre> tmp = pd.read_excel(OUTPUT_SIM_PATH, sheet_name=SHEET_NAME) print(ast.literal_eval(tmp.columns[0])) <pre>{'max_features': 384}\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#embeddings-traditional-statistical-vector-based-embeddings","title":"Embeddings (Traditional Statistical Vector-based Embeddings)\u00b6","text":"<p>Yes, traditional statistical vector-based embeddings are foundational techniques in natural language processing (NLP) that represent text data using various statistical measures. Here are some of these traditional methods:</p>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#1-bag-of-words-bow","title":"1. Bag of Words (BoW)\u00b6","text":"<ul> <li>Description: Represents text by the occurrence (count) of each word in the document without considering the word order or context.</li> <li>Implementation: Typically uses a Count Vectorizer.</li> <li>Characteristics: Produces sparse vectors where each dimension corresponds to a specific term from the vocabulary and the value is the word count.</li> <li>Use Cases: Simple and effective for basic text classification and clustering tasks.</li> </ul>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#2-term-frequency-inverse-document-frequency-tf-idf","title":"2. Term Frequency-Inverse Document Frequency (TF-IDF)\u00b6","text":"<ul> <li>Description: Enhances the Bag of Words model by weighting terms based on their frequency in a document and their inverse frequency across all documents in the corpus.</li> <li>Implementation: Uses TF-IDF Vectorizer.</li> <li>Characteristics: Produces sparse vectors with weighted values, reducing the impact of common words and highlighting important terms.</li> <li>Use Cases: Widely used in information retrieval and text mining.</li> </ul>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#3-latent-semantic-analysis-lsa-or-latent-semantic-indexing-lsi","title":"3. Latent Semantic Analysis (LSA) or Latent Semantic Indexing (LSI)\u00b6","text":"<ul> <li>Description: Applies Singular Value Decomposition (SVD) to the term-document matrix (typically after applying TF-IDF) to reduce dimensions and capture latent semantic relationships between terms.</li> <li>Implementation: Perform SVD on the term-document matrix.</li> <li>Characteristics: Transforms high-dimensional sparse vectors into lower-dimensional dense vectors.</li> <li>Use Cases: Useful for topic modeling and capturing underlying semantic structures.</li> </ul>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#4-latent-dirichlet-allocation-lda","title":"4. Latent Dirichlet Allocation (LDA)\u00b6","text":"<ul> <li>Description: A generative probabilistic model that represents documents as mixtures of topics and topics as mixtures of words.</li> <li>Implementation: Uses probabilistic algorithms to infer topic distributions.</li> <li>Characteristics: Produces dense vectors representing the distribution of topics in each document.</li> <li>Use Cases: Widely used for topic modeling and discovering abstract topics in large text corpora.</li> </ul>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#5-pointwise-mutual-information-pmi","title":"5. Pointwise Mutual Information (PMI)\u00b6","text":"<ul> <li>Description: Measures the association between a pair of words by comparing the probability of their co-occurrence to the probabilities of their individual occurrences.</li> <li>Implementation: Uses co-occurrence matrices.</li> <li>Characteristics: Produces dense vectors that capture the likelihood of words appearing together.</li> <li>Use Cases: Useful for capturing word associations and semantic relationships.</li> </ul>"},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#load-metadata","title":"Load Metadata\u00b6","text":""},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#create-dataframe","title":"Create Dataframe\u00b6","text":""},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#combine-chunks-into-single-articles","title":"Combine Chunks into Single Articles\u00b6","text":""},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#load-ground-truth-dataframe","title":"Load Ground Truth Dataframe\u00b6","text":""},{"location":"projects/genai/example-project/section-one/tfidf_max_features_384_cosine_emd/#save-similarity-scores","title":"Save Similarity Scores\u00b6","text":""},{"location":"projects/genai/health-hub/data-pipeline/","title":"Data Pipeline","text":""},{"location":"projects/genai/health-hub/webapp/introduction/","title":"Introduction","text":""},{"location":"projects/genai/health-hub/webapp/introduction/#purpose-of-webapp","title":"Purpose of Webapp","text":"<p>This webapp was created with the intention to allow content creators and stakeholders to annotate similar articles for clustering (grouping) and optimisation. Article harmonisation and optimisation would then happen asynchronously after exporting the annotated articles.</p> <p>Latest branch on GitHub</p> <p>The branch containing the latest backend can be found on the webapp branch.</p> Disclaimer <p>At the time of writing, <code>webapp</code> is in a rough stage as development was halted half way due to a change in priority. The development stage of the <code>backend</code> is slightly better developed as compared to the <code>frontend</code>.</p>"},{"location":"projects/genai/health-hub/webapp/introduction/#project-structure","title":"Project Structure","text":"<p>The file structure for the webapp is split into the <code>frontend</code> and <code>backend</code> subfolders, each with its own subdirectory called <code>app</code>.</p> <pre><code>.\n\u251c\u2500\u2500 backend\n\u2502   \u2514\u2500\u2500 app\n\u2514\u2500\u2500 frontend\n    \u2514\u2500\u2500 app\n</code></pre> <p>Other project files pertaining to content optimisation and harmonisation are also located in the root directory.</p>"},{"location":"projects/genai/health-hub/webapp/system_architecture/","title":"System Architecture","text":"<p>This document outlines the general strategy of API interaction between the Frontend and Backend.</p> <p>The overall system of the web application comprises three main systems.</p> <ul> <li>Frontend (Angular)</li> <li>Backend (FastAPI)</li> <li>Database (MongoDB)</li> </ul>"},{"location":"projects/genai/health-hub/webapp/system_architecture/#local-development","title":"Local Development","text":"<pre><code>flowchart LR\n    Frontend\n    Backend\n    subgraph Docker\n        MongoDb[(\"MongoDb\")]\n    end\n\n    Frontend --&gt; Backend\n    Backend --&gt; MongoDb</code></pre> <p>Docker is utilised to containerise <code>MongoDb</code> for local development. While at the time of writing, <code>MongoDb</code> is the choice of database, it is important to note that the backend is designed to be as database-agnostic as possible.</p> <p><code>MongoDb</code> was chosen due to its 'schemaless' design, allowing for fast prototyping and adaptability.</p>"},{"location":"projects/genai/health-hub/webapp/backend/introduction/","title":"Introduction","text":"<p>The backend for this webapp has been built with FastAPI as the foundation. Flexibility of the backend was a key criteria for the software architecture. This is done by adhering to Object-Oriented Principles (OOP) for loose coupling.</p> <pre><code>sequenceDiagram\n    participant FE as Frontend\n    participant FA as FastAPI\n    participant DBC as Database Connector\n    participant DB as Database\n\n    FE -&gt;&gt; FA: Makes API request\n    activate FE\n    activate FA\n    FA -&gt;&gt; DBC: Method call\n    activate DBC\n    DBC -&gt;&gt; DB: Database query\n    DB --&gt;&gt; DBC: Records\n    DBC --&gt;&gt; FA: Pydantic or primitive types\n    deactivate DBC\n    FA --&gt;&gt; FE: Serialised Pydantic responses\n    deactivate FA\n    deactivate FE\n</code></pre> <p>The diagram above is a very high level overview of how database interactions should be made -- by using the DbConnector interface to build database connectors. This allows all database queries to be abstracted.</p>"},{"location":"projects/genai/health-hub/webapp/backend/api/endpoints/","title":"Endpoints","text":"<p>The endpoints below are the endpoints that have been implemented.</p> <p>Query Logic and DB Interactions</p> <p>While there are many more endpoints to be desired, it is important to note that the logic to interact with the database has already been implemented. What is left is to connect these endpoints with the <code>DbConnector</code> instance.</p> <p></p>"},{"location":"projects/genai/health-hub/webapp/backend/api/route_organisation/","title":"Route Organisation","text":"<p>Routes are organised by <code>subrouters</code> to organise routes related to their respective categories. The following <code>subrouters</code> have been set up, but not all have been fully configured with endpoints.</p> <ul> <li>Check (for system health checks)</li> <li>Groups</li> <li>Articles</li> <li>Harmonise</li> <li>Ignore</li> <li>Optimise</li> </ul> <p>Endpoints</p> <p>Available endpoints can be found here</p> Revisiting of Endpoints <p>Should this <code>webapp</code> be revisited, the logic to handle 'job' submission should be considered when designing the endpoints, taking into account the logic required to store 'job' transactions.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/","title":"Database Connector","text":"<p>Database Connector is an interface that has to be implemented by classes dedicated for database interactions.</p> <p>As the backend architecture is intended to be modular (closely following OOP concepts), all database interactions must be abstracted by <code>DbConnector</code> interface.</p> <p>The general direction for Database Connector is to be a query executor, whereby all necessary queries are handled by the implemented class. This means that classes that implement this interface must handle parsing of inputs and outputs to match the corresponding <code>Pydantic</code> models.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#overview","title":"Overview","text":"<p>The DbConnector interface provides an abstract class for a query engine abstraction, focusing on executing and parsing database queries tailored for specific data manipulation needs. It encapsulates methods for connecting to the database and managing various entities like articles, groups, edges, and jobs.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelinterface-dbconnector","title":"@label(interface) DbConnector","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#initialisation","title":"Initialisation","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-connect","title":"@label(meth) Connect","text":"<pre><code>async def connect() -&gt; None\n</code></pre> Description Initializes the database connection and completes the setup process."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#group-operations","title":"Group Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-group","title":"@label(meth) Create Group","text":"<pre><code>async def create_group_from_articles(group_name: str, article_ids: List[str]) -&gt; str\n</code></pre> Parameters group_name (str): The name of the group to create. article_ids (List[str]): List of article IDs to include in the group. Returns ID of the newly created group."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-groups","title":"@label(meth) Get All Groups","text":"<pre><code>async def get_all_groups() -&gt; List[Group]\n</code></pre> Returns A list of all groups, each populated with their respective ArticleMeta and Edges."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-by-id","title":"@label(meth) Get by ID","text":"<pre><code>async def get_group(group_id: str) -&gt; Group\n</code></pre> Parameters group_id (str): The ID of the group to retrieve. Returns The specified group."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#article-operations","title":"Article Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-articles","title":"@label(meth) Create Articles","text":"<pre><code>async def create_articles(articles: List[Article]) -&gt; List[str]\n</code></pre> Parameters articles (List[Article]): List of articles to be created in the database. Returns List of IDs for the newly created articles."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-articles","title":"@label(meth) Get All Articles","text":"<pre><code>async def get_all_articles() -&gt; List[ArticleMeta]\n</code></pre> Returns A list of all articles along with their metadata, excluding article contents to save on memory."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-articles","title":"@label(meth) Get Articles","text":"<pre><code>async def get_articles(article_ids: List[str]) -&gt; List[Article]\n</code></pre> Parameters article_ids (List[str]): List of article IDs to fetch. Returns List of articles with their content."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#edge-operations","title":"Edge Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-edges","title":"@label(meth) Create Edges","text":"<pre><code>async def create_edges(edges: List[Edge]) -&gt; List[str]\n</code></pre> Parameters edges (List[Edge]): List of edges to be created between articles. Returns List of IDs for the created edges."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-edges","title":"@label(meth) Get Edges","text":"<pre><code>async def get_edges(article_ids: List[str]) -&gt; List[Edge]\n</code></pre> Parameters article_ids (List[str]): List of article IDs to fetch edges for. Returns List of edges between the specified articles."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#generated-article-operations","title":"Generated Article Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-generated-articles","title":"@label(meth) Create Generated Articles","text":"<pre><code>async def create_generated_article(generated_articles: List[GeneratedArticle]) -&gt; List[str]\n</code></pre> Parameters generated_articles (List[GeneratedArticle]): List of generated articles to be inserted. Returns List of IDs for the inserted generated articles."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#job-operations","title":"Job Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-job","title":"@label(meth) Create Job","text":"<pre><code>async def create_job(group_id:str, remove_jobs: List[str], optimise_jobs: List[str], ignore_jobs: List[str], combine_jobs: List[str]) -&gt; str\n</code></pre> Parameters group_id (str): ID of the associated group remove_jobs (List[str]): List of <code>RemoveJob</code> IDs. Optimise_jobs (List[str]): List of <code>OptimiseJob</code> IDs. ignore_jobs (List[str]): List of <code>IgnoreJob</code> IDs. combine_jobs (List[str]): List of <code>CombineJob</code> IDs."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-job","title":"@label(meth) Get Job","text":"<pre><code>async def get_job(job_id: str) -&gt; Job\n</code></pre> Parameters job_id Returns Job"},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#combine-job-operations","title":"Combine Job Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-combine-job","title":"@label(meth) Create Combine Job","text":"<pre><code>async def create_combine_job(\n        group_id: str,\n        sub_group_name: str,\n        article_ids: List[str],\n        remarks: str = \"\",\n        context: str = \"\"\n) -&gt; str\n</code></pre> Parameters group_id (str): ID of the parent group. sub_group_name (str): Name of the subgroup to be combined. article_ids (List[str]): IDs of articles to be combined. remarks (str): Optional remarks for the subgroup. context (str): Additional context for the subgroup. Returns ID of the created combine job."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-combine-job","title":"@label(meth) Get Combine Job","text":"<pre><code>async def get_combine_job(job_combine_id: str) -&gt; JobCombine\n</code></pre> Parameters job_combine_id (str): ID of <code>JobCombine</code> Returns Specified combine job record."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-combine-jobs","title":"@label(meth) Get All Combine Jobs","text":"<pre><code>async def get_all_combine_jobs() -&gt; List[JobCombine]\n</code></pre> Returns List of all combine job records."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#optimisation-job-operations","title":"Optimisation Job Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-optimise-job","title":"@label(meth) Create Optimise Job","text":"<pre><code>async def create_optimise_job(\n    article_id: str,\n    optimise_title: bool,\n    optimise_meta: bool,\n    optimise_content: bool,\n    title_remarks: str = \"\",\n    meta_remarks: str = \"\",\n    content_remarks: str = \"\"\n) -&gt; str\n</code></pre> Parameters article_id (str): ID of the article to be optimised. optimise_title (bool): True if the title needs to be optimised. optimise_meta (bool): True if the meta description needs to be optimised. optimise_content (bool): True if the content needs to be optimised. title_remarks (str): Optional remarks for title optimisation. meta_remarks (str): Optional remarks for meta optimisation. content_remarks (str): Optional remarks for content optimisation. Returns ID of the created optimisation job."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-optimise-job","title":"@label(meth) Get Optimise Job","text":"<pre><code>async def get_optimise_job(job_optimise_id: str) -&gt; JobOptimise\n</code></pre> Parameters job_optimise_id (str): ID of the optimise job. Returns Specified optimise job record."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-optimise-jobs","title":"@label(meth) Get All Optimise Jobs","text":"<pre><code>async def get_all_optimise_jobs() -&gt; List[JobOptimise]\n</code></pre> Returns List of all optimisation job records."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#article-ignoring-operations","title":"Article Ignoring Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-ignore-job","title":"@label(meth) Create Ignore Job","text":"<pre><code>async def create_ignore_job(article_id: str) -&gt; str\n</code></pre> Parameters article_id (str): ID of the article to be ignored. Returns ID of the created ignore job."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-ignore-job","title":"@label(meth) Get Ignore Job","text":"<pre><code>async def get_ignore_job(job_ignore_id: str) -&gt; JobIgnore\n</code></pre> Parameters job_ignore_id (str): ID of the ignore job. Returns Specified ignore job record."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-ignore-jobs","title":"@label(meth) Get All Ignore Jobs","text":"<pre><code>async def get_all_ignore_jobs() -&gt; List[JobIgnore]\n</code></pre> Returns List of all ignore job records."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#article-removal-operations","title":"Article Removal Operations","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-create-remove-job","title":"@label(meth) Create Remove Job","text":"<pre><code>async def create_remove_job(article_id: str, remarks: str) -&gt; str\n</code></pre> Parameters article_id (str): ID of the article to be removed. remarks (str): Remarks about why the article is being removed. Returns ID of the created remove job."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-remove-job","title":"@label(meth) Get Remove Job","text":"<pre><code>async def get_remove_job(job_remove_id: str) -&gt; JobRemove\n</code></pre> Parameters job_remove_id (str): ID of the remove job. Returns Specified remove job record."},{"location":"projects/genai/health-hub/webapp/backend/db/db_connector/#labelmeth-get-all-remove-jobs","title":"@label(meth) Get All Remove Jobs","text":"<pre><code>async def get_all_remove_jobs() -&gt; List[JobRemove]\n</code></pre> Returns List of all remove job records."},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/beanie_documents/","title":"Beanie Documents","text":"<p>This file contains the Beanie document types used to interacting with the DB.</p> <p>NOTE: In Beanie, a Link is a special field type used to create a reference between two document types in a MongoDB database. It allows for the establishment of relationships between documents, similar to foreign keys in relational databases.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/beanie_documents/#group-document","title":"Group Document","text":"<pre><code>class GroupDocument(Document):\n    name: str\n    articles: List[Link[\"ArticleDocument\"]]\n    job: Link[\"JobDocument\"] = None\n</code></pre> <p>Description: A Group refers to a cluster of similar articles.</p> <p>Class variables:</p> <ul> <li><code>name</code>: The name of the group.</li> <li><code>articles</code>: A list of articles that belong to the group.</li> <li><code>job</code>: The latest job associated with the group.</li> </ul>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/er_diagram/","title":"ER Diagram","text":"<p>The ER diagram below is the implemented relation of database relations in MongoDb.</p> <pre><code>erDiagram\n  GROUP ||--o{ JOB : has\n  GROUP ||--|{ ARTICLE : has\n  GROUP ||--o| GENERATED_ARTICLE: has\n  GROUP ||--|{ EDGE : has\n  EDGE ||--|| ARTICLE : start\n  EDGE ||--|| ARTICLE : end\n  ARTICLE |{--o| JOB_COMBINE : \"part of\"\n  ARTICLE ||--o| JOB_IGNORE : \"part of\"\n  ARTICLE ||--o| JOB_REMOVE : \"part of\"\n  ARTICLE ||--o| JOB_OPTIMISE : \"part of\"\n  JOB ||--o{ JOB_COMBINE : contains\n  JOB ||--o{ JOB_OPTIMISE : contains\n  JOB ||--o{ JOB_REMOVE : contains\n  JOB ||--o{ JOB_IGNORE : contains</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/","title":"Mongo Connector","text":"<p>Mongo Connector is a concrete class that implements all the abstract method of the Database Connector that is dedicated for intereactions with MongoDB</p> <p>All necessary MongoDB queries are handled by this class. This class also handle parsing of inputs and outputs to match the corresponding <code>Pydantic</code> models.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#overview","title":"Overview","text":"<p>This Python file defines a MongoConnector class that extends a DbConnector base class, specifically tailored for interacting with a MongoDB database using asynchronous operations. It provides methods to connect to the database, initialize the Beanie ODM with specific document models, and perform CRUD operations on various entities such as articles, groups, jobs, and edges. The class includes functionality to create and retrieve articles, groups, and jobs (tasks related to articles), as well as to manage relationships between articles through edges. The connector also converts MongoDB documents into Python objects for easier manipulation within the application.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#connection","title":"Connection","text":"<ul> <li>connect</li> </ul> <pre><code>async def connect() -&gt; None\n</code></pre> <p>Description: Initializes the connection to MongoDB and completes the setup process.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#group-operations","title":"Group Operations","text":"<ul> <li>create_group_from_articles</li> </ul> <pre><code>async def create_group_from_articles(group_name: str, article_ids: List[str]) -&gt; str\n</code></pre> <p>Parameters:</p> <ul> <li>group_name (str): The name of the group to create.</li> <li>article_ids (List[str]): List of article IDs to include in the group.</li> </ul> <p>Description: Returns: ID of the newly created group.</p> <ul> <li>get_all_groups</li> </ul> <pre><code>async def get_all_groups() -&gt; List[Group]\n</code></pre> <p>Returns: A list of all <code>Group</code>, each populated with their respective <code>ArticleMeta</code> and <code>Edge</code>.</p> <ul> <li>get_group</li> </ul> <pre><code>async def get_group(group_id: str) -&gt; Group\n</code></pre> <p>Parameters:</p> <ul> <li>group_id (str): The ID of the group to retrieve.</li> </ul> <p>Returns: A <code>Group</code> representing the specified group.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#article-operations","title":"Article Operations","text":"<ul> <li>create_articles</li> </ul> <pre><code>async def create_articles(articles: List[Article]) -&gt; List[str]\n</code></pre> <p>Parameters:</p> <ul> <li>articles (List[Article]): List of <code>Article</code> to be created in the database.</li> </ul> <p>Returns: List of IDs for the newly created articles.</p> <ul> <li>get_all_articles</li> </ul> <pre><code>async def get_all_articles() -&gt; List[ArticleMeta]\n</code></pre> <p>Returns: A list of all <code>Article</code> along with their metadata, excluding article contents to save on memory.</p> <ul> <li>get_articles</li> </ul> <pre><code>async def get_articles(article_ids: List[str]) -&gt; List[Article]\n</code></pre> <p>Parameters:</p> <ul> <li>article_ids (List[str]): List of article IDs to fetch.</li> </ul> <p>Returns: List of <code>Article</code> with their content.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#edge-operations","title":"Edge Operations","text":"<ul> <li>create_edges</li> </ul> <pre><code>async def create_edges(edges: List[Edge]) -&gt; List[str]\n</code></pre> <p>Parameters:</p> <ul> <li>edges (List[Edge]): List of <code>Edge</code> to be created between articles.</li> </ul> <p>Returns: List of IDs for the created edges.</p> <ul> <li>get_edges</li> </ul> <pre><code>async def get_edges(article_ids: List[str]) -&gt; List[Edge]\n</code></pre> <p>Parameters:</p> <ul> <li>article_ids (List[str]): List of article IDs to fetch edges for.</li> </ul> <p>Returns: List of <code>Edge</code> between the specified articles.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#generated-article-operations","title":"Generated Article Operations","text":"<ul> <li>create_generated_article</li> </ul> <pre><code>async def create_generated_article(generated_articles: List[GeneratedArticle]) -&gt; List[str]\n</code></pre> <p>Parameters:</p> <ul> <li>generated_articles (List[GeneratedArticle]): List of <code>GeneratedArticle</code> to be inserted.</li> </ul> <p>Returns: List of IDs for the inserted generated articles.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#job-operations","title":"Job Operations","text":"<ul> <li>create_job</li> </ul> <pre><code>async def async def create_job(\n        self,\n        group_id: str,\n        remove_jobs: List[str],\n        optimise_jobs: List[str],\n        ignore_jobs: List[str],\n        combine_jobs: List[str],\n    ) -&gt; str\n</code></pre> <p>Description: This function is triggered upon user submission to create a new job entry in the database. It updates the associated group's job attribute to ensure that the group is linked to only the most recent job.</p> <p>Parameters:</p> <ul> <li>group_id (str): ID of group that this job is created for</li> <li>remove_jobs (List[str]): List of article IDs to be marked as removed</li> <li>optimise_jobs (List[str]): List of article IDs to be marked as optimised</li> <li>ignore_jobs (List[str]): List of article IDs to be marked as ignored</li> <li>combine_jobs (List[str]): List of article IDs to be marked as combine</li> </ul> <p>Returns: ID of newly create job</p> <ul> <li>get_job</li> </ul> <pre><code>async def get_job(self, job_id: str) -&gt; Job\n</code></pre> <p>Parameters:</p> <ul> <li>job_id (str): The ID of the job to retrieve.</li> </ul> <p>Returns: The specified <code>Job</code>.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#job-combine-operations","title":"Job Combine Operations","text":"<ul> <li>create_combine_job</li> </ul> <pre><code>async def create_combine_job(\n    self,\n    group_id: str,\n    sub_group_name: str,\n    article_ids: List[str],\n    remarks: str = \"\",\n    context: str = \"\",\n) -&gt; str\n</code></pre> <p>Parameters:</p> <ul> <li>group_id (str): ID of group that this combine job was created from</li> <li>sub_group_name (str): Name of subgroup</li> <li>article_ids (List[str]): List of article IDs to be added in this subgroup</li> <li>remarks (str): Remarks for the generated article from this job given by the user [Optional]</li> <li>context (str): Context given by the user to add on to the harmonisation process [Optional]</li> </ul> <p>Returns: ID of newly create combine job</p> <p>Note: Checks are implemented to check if a combine job with the same values are already present in the database. If so, the existing combine job ID is returned instead of creating a new one.</p> <ul> <li>get_combine_job</li> </ul> <pre><code>async def get_combine_job(self, job_combine_id) -&gt; JobCombine\n</code></pre> <p>Parameters:</p> <ul> <li>job_combine_id (str): ID of the combine job to retrieve.</li> </ul> <p>Reutrns: The specified <code>JobCombine</code>.</p> <ul> <li>get_all_combine_jobs</li> </ul> <pre><code>async def get_all_combine_jobs() -&gt; List[JobCombine]\n</code></pre> <p>Returns: A list of all <code>JobCombine</code> entries.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#job-optimise-operations","title":"Job Optimise Operations","text":"<ul> <li>create_optimise_job</li> </ul> <pre><code>    async def create_optimise_job(\n        self,\n        article_id: str,\n        optimise_title: bool,\n        optimise_meta: bool,\n        optimise_content: bool,\n        title_remarks: str = \"\",\n        meta_remarks: str = \"\",\n        content_remarks: str = \"\",\n    ) -&gt; str\n</code></pre> <p>Parameters:</p> <ul> <li>article_id (str): ID of article to be optimised</li> <li>optimise_title (bool): Flag to indicate if title should be optimised</li> <li>optimise_meta (bool): Flag to indicate if meta description should be optimised</li> <li>optimise_content (bool): Flag to indicate if content should be optimised</li> <li>title_remarks (str): Remarks for the optimised title given by the user [Optional]</li> <li>meta_remarks (str): Remarks for the optimised meta description given by the user [Optional]</li> <li>content_remarks (str): Remarks for the optimised content given by the user [Optional]</li> </ul> <p>Returns: ID of newly created optimise job</p> <p>Note: Checks are implemented to check if an optimise job with the same values are already present in the database. If so, the existing optimise job ID is returned instead of creating a new one.</p> <ul> <li>get_optimise_job</li> </ul> <pre><code>async def get_optimise_job(self, job_optimise_id) -&gt; JobOptimise\n</code></pre> <p>Parameters:</p> <ul> <li>job_optimise_id (str): ID of the optimise job to retrieve.</li> </ul> <p>Returns: The specified <code>JobOptimise</code>.</p> <ul> <li>get_all_optimise_jobs</li> </ul> <pre><code>async def get_all_optimise_jobs(self) -&gt; List[JobOptimise]:\n</code></pre> <p>Returns: A list of all <code>JobOptimise</code> entries.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#job-ignore-operations","title":"Job Ignore Operations","text":"<ul> <li>create_ignore_job</li> </ul> <pre><code>async def create_ignore_job(self, article_id: str) -&gt; str\n</code></pre> <p>Parameters:</p> <ul> <li>article_id (str): ID of article to be ignored</li> </ul> <p>Returns: ID of newly created ignore job</p> <p>Note: Checks are implemented to check if an ignore job with the same values are already present in the database. If so, the existing ignore job ID is returned instead of creating a new one.</p> <ul> <li>get_ignore_job</li> </ul> <pre><code>async def get_ignore_job(self, job_ignore_id) -&gt; JobIgnore:\n</code></pre> <p>Parameters:</p> <ul> <li>job_ignore_id (str): ID of the ignore job to retrieve.</li> </ul> <p>Returns: The specified <code>JobIgnore</code>.</p> <ul> <li>get_all_ignore_jobs</li> </ul> <pre><code>async def get_all_ignore_jobs(self) -&gt; List[JobIgnore]:\n</code></pre> <p>Returns: A list of all <code>JobIgnore</code> entries.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#job-remove-operations","title":"Job Remove Operations","text":"<ul> <li>create_remove_job</li> </ul> <pre><code>async def create_remove_job(self, article_id: str, remarks: str) -&gt; str\n</code></pre> <p>Parameters:</p> <ul> <li>article_id (str): ID of article to be removed</li> <li>remarks (str): Remarks for the removing the article given by the user</li> </ul> <p>Returns: ID of newly created remove job</p> <ul> <li>get_remove_job</li> </ul> <pre><code>async def get_remove_job(self, job_remove_id) -&gt; JobRemove\n</code></pre> <p>Parameters:</p> <ul> <li>job_remove_id (str): ID of the remove job to retrieve.</li> </ul> <p>Returns: The specified <code>JobRemove</code>.</p> <ul> <li>get_all_remove_jobs</li> </ul> <pre><code>async def get_all_remove_jobs(self) -&gt; List[JobRemove]\n</code></pre> <p>Returns: A list of all <code>JobRemove</code> entries.</p>"},{"location":"projects/genai/health-hub/webapp/backend/db/mongo/mongo_connector/#helper-functions","title":"Helper functions","text":"<ul> <li>__getArticleSimilarity</li> </ul> <pre><code>async def __getArticleSimilarity(articleDoc: ArticleDocument) -&gt; float\n</code></pre> <p>Parameters:</p> <ul> <li>articleDoc (ArticleDocument): The article document to get the edge with the highest similarity</li> </ul> <p>Returns: The highest similarity score from the edges for a given article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/overview/","title":"Overview","text":"<p><code>Pydantic</code> models are used to standardise data types within the backend. While they are used predominantly for generating the correct response schema for API endpoints, they are also used for some database interactions via <code>DbConnector</code>.</p> Relations Edge Group Articles Article ArticleMeta GeneratedArticle Jobs Job JobCombine JobIgnore JobOptimise JobRemove"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/","title":"@label(type) Article","text":"<p>Article datatype contains meta information (like <code>ArticleMeta</code>), together with the content of the article.</p> PythonActual Implementation <pre><code>class Article(BaseModel):\n    id: str = Field(default=\"\")\n\n    title: str\n    description: str\n    date_modified: str = Field(default=\"\")\n    similarity: float = Field(default=-1)\n\n    keywords: List[str] = Field(default=[])\n    labels: List[str] = Field(default=[])\n\n    pr_name: str\n    content_category: str\n    url: str = Field(default=\"\")\n    cover_image_url: str = Field(default=\"\")\n\n    status: str = Field(default=\"\")\n    engagement_rate: float = Field(default=-1.0)\n    number_of_views: int = Field(default=-1)\n\n    content: str = Field(default=\"\")\n</code></pre> <p>The actual implementation of this class inheirits <code>ArticleMeta</code>.</p> <pre><code>class Article(ArticleMeta):\n    content: str = Field(default=\"\")\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-id","title":"@label(attr) id","text":"<p><code>string</code> Unique identifier for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-title","title":"@label(attr) title","text":"<p><code>string</code> Title text of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-description","title":"@label(attr) description","text":"<p><code>string</code> SEO description of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-date_modified","title":"@label(attr) date_modified","text":"<p><code>string</code> The date when the article was last modified.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-similarity","title":"@label(attr) similarity","text":"<p><code>float</code> A numerical value representing how similar this article is to others.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-keywords","title":"@label(attr) keywords","text":"<p><code>List[str]</code> A list of keywords associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-labels","title":"@label(attr) labels","text":"<p><code>List[str]</code> A list of labels or tags associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-pr_name","title":"@label(attr) pr_name","text":"<p><code>string</code> The name of the content author for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-content_category","title":"@label(attr) content_category","text":"<p><code>string</code> The category of content the article belongs to.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-url","title":"@label(attr) url","text":"<p><code>string</code> The URL where the article can be accessed.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-cover_image_url","title":"@label(attr) cover_image_url","text":"<p><code>string</code> The URL of the cover image for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-status","title":"@label(attr) status","text":"<p><code>string</code> The status of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-engagement_rate","title":"@label(attr) engagement_rate","text":"<p><code>float</code> The engagement rate of the article, typically a percentage.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-number_of_views","title":"@label(attr) number_of_views","text":"<p><code>int</code> The number of times the article has been viewed.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article/#labelattr-content","title":"@label(attr) content","text":"<p><code>string</code> The article content extracted as a string.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/","title":"@label(type) Article Meta","text":"<p>This datatype contains the high level attributes of articles in the system.</p> Python <pre><code>class ArticleMeta(BaseModel):\n    id: str = Field(default=\"\")\n\n    title: str\n    description: str\n    date_modified: str = Field(default=\"\")\n    similarity: float = Field(default=-1)\n\n    keywords: List[str] = Field(default=[])\n    labels: List[str] = Field(default=[])\n\n    pr_name: str\n    content_category: str\n    url: str = Field(default=\"\")\n    cover_image_url: str = Field(default=\"\")\n\n    status: str = Field(default=\"\")\n    engagement_rate: float = Field(default=-1.0)\n    number_of_views: int = Field(default=-1)\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-id","title":"@label(attr) id","text":"<p><code>string</code> Unique identifier for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-title","title":"@label(attr) title","text":"<p><code>string</code> Title text of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-description","title":"@label(attr) description","text":"<p><code>string</code> SEO description of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-date_modified","title":"@label(attr) date_modified","text":"<p><code>string</code> The date when the article was last modified.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-similarity","title":"@label(attr) similarity","text":"<p><code>float</code> A numerical value representing how similar this article is to others.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-keywords","title":"@label(attr) keywords","text":"<p><code>List[str]</code> A list of keywords associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-labels","title":"@label(attr) labels","text":"<p><code>List[str]</code> A list of labels or tags associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-pr_name","title":"@label(attr) pr_name","text":"<p><code>string</code> The name of the content author for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-content_category","title":"@label(attr) content_category","text":"<p><code>string</code> The category of content the article belongs to.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-url","title":"@label(attr) url","text":"<p><code>string</code> The URL where the article can be accessed.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-cover_image_url","title":"@label(attr) cover_image_url","text":"<p><code>string</code> The URL of the cover image for the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-status","title":"@label(attr) status","text":"<p><code>string</code> The status of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-engagement_rate","title":"@label(attr) engagement_rate","text":"<p><code>float</code> The engagement rate of the article, typically a percentage.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_meta/#labelattr-number_of_views","title":"@label(attr) number_of_views","text":"<p><code>int</code> The number of times the article has been viewed.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/article_status/","title":"@label(type) Article Status","text":"Python <pre><code>class ArticleStatus(Enum):\n    COMBINE: str = \"Combined\"\n    IGNORE: str = \"Ignored\"\n    OPTIMISE: str = \"Optimise\"\n    REMOVE: str = \"Remove\"\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/","title":"@label(type) Generated Article","text":"<p>This section documents the <code>GeneratedArticle</code> class which encapsulates all necessary details of an article generated by the system.</p> Python <pre><code>class GeneratedArticle(BaseModel):\n    id: str = Field(default=\"\")  # Will only be present when retrieving from DB\n\n    title: str = Field()\n    description: str = Field()\n    pr_name: str = Field()\n    content_category: str = Field()\n    url: str = Field(default=\"\")\n\n    status: str = Field(default=\"\")\n\n    date_modified: str = Field(default=\"\")\n\n    # Article peripheral information\n    keywords: List[str] = Field(default=[])\n    labels: List[str] = Field(default=[])\n    cover_image_url: str = Field(default=\"\")\n\n    approved: bool = Field(default=False)\n\n    content: str\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-id","title":"@label(attr) id","text":"<p><code>string</code> Unique identifier for the article, primarily used for database retrieval.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-title","title":"@label(attr) title","text":"<p><code>string</code> The title of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-description","title":"@label(attr) description","text":"<p><code>string</code> A brief description of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-pr_name","title":"@label(attr) pr_name","text":"<p><code>string</code> The name of the content author.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-content_category","title":"@label(attr) content_category","text":"<p><code>string</code> The category under which the article falls.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-url","title":"@label(attr) url","text":"<p><code>string</code> The URL where the article can be accessed.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-status","title":"@label(attr) status","text":"<p><code>string</code> The publication status of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-date_modified","title":"@label(attr) date_modified","text":"<p><code>string</code> The last date the article was modified.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-keywords","title":"@label(attr) keywords","text":"<p><code>List[str]</code> Keywords associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-labels","title":"@label(attr) labels","text":"<p><code>List[str]</code> Labels associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-cover_image_url","title":"@label(attr) cover_image_url","text":"<p><code>string</code> URL of the article's cover image.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-approved","title":"@label(attr) approved","text":"<p><code>bool</code> Whether the article has been approved for publication.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/articles/generated_article/#labelattr-content","title":"@label(attr) content","text":"<p><code>string</code> The full content of the article.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/","title":"<code>Job</code>","text":"Python <pre><code>class Job(BaseModel):\n    group_id: str\n    created_at: str\n    remove_articles: List[JobRemove] = Field(default=[])\n    ignore_articles: List[JobIgnore] = Field(default=[])\n    optimise_articles: List[JobOptimise] = Field(default=[])\n    combine_articles: List[JobCombine] = Field(default=[])\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-group_id","title":"<code>attr</code> group_id","text":"<p><code>str</code> The unique identifier for the group associated with the job.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-created_at","title":"<code>attr</code> created_at","text":"<p><code>str</code> The timestamp when the job was created.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-remove_articles","title":"<code>attr</code> remove_articles","text":"<p><code>List[JobRemove]</code> A list of articles to be removed from the job.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-ignore_articles","title":"<code>attr</code> ignore_articles","text":"<p><code>List[JobIgnore]</code> A list of articles to be ignored during the job processing.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-optimise_articles","title":"<code>attr</code> optimise_articles","text":"<p><code>List[JobOptimise]</code> A list of articles to be optimised as part of the job.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job/#attr-combine_articles","title":"<code>attr</code> combine_articles","text":"<p><code>List[JobCombine]</code> A list of articles to be combined during the job processing.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/","title":"<code>Job Combine</code>","text":"Python <pre><code>class JobCombine(BaseModel):\n    group_id: str\n    group_name: str\n    sub_group_name: str\n    remarks: str\n    context: str\n    original_articles: List[Article]\n    generated_article: Optional[GeneratedArticle]\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-group_id","title":"<code>attr</code> group_id","text":"<p><code>str</code> The unique identifier for the group associated with the job combine.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-group_name","title":"<code>attr</code> group_name","text":"<p><code>str</code> The name of the group associated with the job combine.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-sub_group_name","title":"<code>attr</code> sub_group_name","text":"<p><code>str</code> The name of the sub-group within the group.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-remarks","title":"<code>attr</code> remarks","text":"<p><code>str</code> Remarks or notes associated with the job combine.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-context","title":"<code>attr</code> context","text":"<p><code>str</code> The context or background information relevant to the job combine.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-original_articles","title":"<code>attr</code> original_articles","text":"<p><code>List[Article]</code> A list of original articles involved in the job combine.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_combine/#attr-generated_article","title":"<code>attr</code> generated_article","text":"<p><code>Optional[GeneratedArticle]</code> The article generated as a result of combining the original articles.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_ignore/","title":"<code>Job Ignore</code>","text":"<p>This datatype represents a job to ignore specific articles within the system.</p> Python <pre><code>class JobIgnore(BaseModel):\n    article: Article\n    remarks: str\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_ignore/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_ignore/#attr-article","title":"<code>attr</code> article","text":"<p><code>Article</code> The article associated with the ignore job.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_ignore/#attr-remarks","title":"<code>attr</code> remarks","text":"<p><code>string</code> Remarks explaining why the article is ignored.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/","title":"<code>Job Optimise</code>","text":"<p>This datatype represents a job for optimising various aspects of an article within the system.</p> Python <pre><code>class JobOptimise(BaseModel):\n    id: str\n    optimise_title: bool\n    title_remarks: str\n    optimise_meta: bool\n    meta_remarks: str\n    optimise_content: bool\n    content_remarks: str\n\n    original_article: Article\n    generated_article: Optional[GeneratedArticle]\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-id","title":"<code>attr</code> id","text":"<p><code>string</code> Unique identifier for the job.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-optimise_title","title":"<code>attr</code> optimise_title","text":"<p><code>bool</code> Indicates whether the title of the article should be optimised.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-title_remarks","title":"<code>attr</code> title_remarks","text":"<p><code>string</code> Remarks about the title optimisation.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-optimise_meta","title":"<code>attr</code> optimise_meta","text":"<p><code>bool</code> Indicates whether the metadata of the article should be optimised.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-meta_remarks","title":"<code>attr</code> meta_remarks","text":"<p><code>string</code> Remarks about the metadata optimisation.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-optimise_content","title":"<code>attr</code> optimise_content","text":"<p><code>bool</code> Indicates whether the content of the article should be optimised.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-content_remarks","title":"<code>attr</code> content_remarks","text":"<p><code>string</code> Remarks about the content optimisation.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-original_article","title":"<code>attr</code> original_article","text":"<p><code>Article</code> The original article before optimisation.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_optimise/#attr-generated_article","title":"<code>attr</code> generated_article","text":"<p><code>Optional[GeneratedArticle]</code> The article generated after optimisation, if available.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_remove/","title":"<code>Job Remove</code>","text":"<p>This datatype represents a job removal request and associated metadata within the system.</p> Python <pre><code>class JobRemove(BaseModel):\n    id: str\n    article: Article\n    remarks: str\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_remove/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_remove/#attr-id","title":"<code>attr</code> id","text":"<p><code>string</code> Unique identifier for the job removal request.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_remove/#attr-article","title":"<code>attr</code> article","text":"<p><code>Article</code> The article associated with the job removal.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/jobs/job_remove/#attr-remarks","title":"<code>attr</code> remarks","text":"<p><code>string</code> Remarks or notes associated with the job removal request.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/edge/","title":"<code>Edge</code>","text":"<p>This datatype represents a connection between two nodes in a graph, typically used to represent relationships in a network.</p> Python <pre><code>class Edge(BaseModel):\n    start: str = Field()\n    end: str = Field()\n    weight: float = Field(default=-1.0)\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/edge/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/relations/edge/#attr-start","title":"<code>attr</code> start","text":"<p><code>string</code> The starting node of the edge, this will be the <code>id</code> of an <code>Article</code> or <code>ArticleMeta</code>.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/edge/#attr-end","title":"<code>attr</code> end","text":"<p><code>string</code> The ending node of the edge, this will be the <code>id</code> of an <code>Article</code> or <code>ArticleMeta</code>.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/edge/#attr-weight","title":"<code>attr</code> weight","text":"<p><code>float</code> The weight of the edge, which can represent the strength of the connection or cost associated with the edge. Default is -1.0, indicating an unspecified weight.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/","title":"<code>Group</code>","text":"<p>This datatype represents a group of articles and associated metadata within the system.</p> Python <pre><code>class Group(BaseModel):\n    id: str = Field(default=\"\")\n\n    name: str = Field(default=\"\")\n    edges: List[Edge] = Field(default=[])\n\n    articles: List[ArticleMeta] = Field(default=[])  # Articles not reviewed yet\n    job: Job = Field(default=None)\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attr-id","title":"<code>attr</code> id","text":"<p><code>string</code> Unique identifier for the group.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attr-name","title":"<code>attr</code> name","text":"<p><code>string</code> Name of the group.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attr-edges","title":"<code>attr</code> edges","text":"<p><code>List[Edge]</code> A list of edges connecting this group to other entities.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attr-articles","title":"<code>attr</code> articles","text":"<p><code>List[ArticleMeta]</code> A list of articles metadata that are part of this group.</p>"},{"location":"projects/genai/health-hub/webapp/backend/types/relations/group/#attr-job","title":"<code>attr</code> job","text":"<p><code>Job</code> The job associated with this group.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/frontend_activity_diagram/","title":"Frontend activity diagram","text":"Front End Activity Diagram <pre><code>stateDiagram\n    state if_state &lt;&lt;choice&gt;&gt;\n    state if_state2 &lt;&lt;choice&gt;&gt;\n    state if_state3 &lt;&lt;choice&gt;&gt;\n    state fork_state &lt;&lt;fork&gt;&gt;\n    state join_state &lt;&lt;join&gt;&gt;\n\n    s1: User selects department\n    s2: A group is shown to user\n    s3: Graph view\n    s4: Table view\n    s5: Add article(s) to optimise\n    s6: Add article(s) to ignore\n    s7: Add article(s) to remove\n    s8: Add articles to combine\n    s9: User submits job\n    s10: Job is sent for processing\n    s11: Redirect to jobs page\n\n    [*] --&gt; s1\n    s1 --&gt; s2\n    s2 --&gt; if_state\n    if_state --&gt; s3: Select Graph View\n    if_state --&gt; s4: Select Table View\n    s3 --&gt; fork_state\n    s4 --&gt; fork_state\n    fork_state --&gt; s5\n    fork_state --&gt; s6\n    fork_state --&gt; s7\n    fork_state --&gt; s8\n    s5 --&gt; join_state\n    s6 --&gt; join_state\n    s7 --&gt; join_state\n    s8 --&gt; join_state\n    join_state --&gt; s9\n    s9 --&gt; s10\n    s10 --&gt; s11\n    s11 --&gt; if_state2\n    if_state2 --&gt; [*] : Job has been processed\n    if_state2 --&gt; if_state3 : Job has not been processed\n    if_state3 --&gt; [*] : Delete Job\n    if_state3 --&gt; s2 : Edit Job\n\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/introduction/","title":"Introduction","text":"<p>The frontend was build with Angular to accommodate for isolation of app logic by using services to abstract logic away from components. Taiga UI was used as the component library.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/pipes/date/","title":"Date","text":"<p>This pipe was introduced to format date strings using <code>Moment.js</code> within the component itself.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/pipes/date/#labelpipe-datepipe","title":"@label(pipe) DatePipe","text":"DeclarationUsage (Default)Usage (Defined Format) <pre><code>@Pipe({\n    name: 'date',\n    standalone: true\n})\n</code></pre> <pre><code>&lt;span&gt;{{ data.dateTimeAttribute | date }}&lt;/span&gt;\n</code></pre> <pre><code>&lt;span&gt;{{ data.dateTimeAttribute | date:'YYYY-MM-DD' }}&lt;/span&gt;\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/pipes/date/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/pipes/date/#labelmeth-transform","title":"@label(meth) Transform","text":"<pre><code>transform(\n    value: Date | moment.Moment | string,\n    dateFormat: string=\"DD-MM-YYYY\"\n): string\n</code></pre> Description This method converts any datetime format string into a specified format using <code>Momemnt.js</code>. Parameters value(Date|moment.Moment|string): string that contains the original date information dateFormat(string=\"DD-MM-YYYY\"): format for <code>Moment.js</code> to follow for the output. Returns <code>string</code> of date that has been formatted."},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/","title":"Cluster","text":"<p>This service was designed to handle data between the frontend and the backend, as well as managing data for frontend consumption.</p> <p>Outdated naming convention</p> <p>Some of the terminology used in this service is outdated (e.g. <code>Clusters</code> should be refered to as <code>Groups</code>). This document will refer to them in the correct names, but methods currently retain the legacy terminology.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelservice-clusterservice","title":"@label(service) ClusterService","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelprivate-labelattr-all_clusters","title":"@label(private) @label(attr) $all_clusters","text":"<p><code>BehaviorSubject&lt;Cluster[]&gt;</code> stores all unfiltered and unsorted data fetched from the backend.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelprivate-labelattr-clusters","title":"@label(private) @label(attr) $clusters","text":"<p><code>BehaviorSubject&lt;Cluster[]&gt;</code> stores all filtered and sorted data (or is supposed to at least).</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelprivate-labelattr-filters","title":"@label(private) @label(attr) $filters","text":"<p><code>BehaviorSubject&lt;FilterGroup&gt;</code> stores all filters in a key value object.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelprivate-labelattr-sorter","title":"@label(private) @label(attr) $sorter","text":"<p><code>BehaviorSubject&lt;Sorter&gt;</code> stores the sorter that should be used.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#group-methods","title":"Group Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-fetch-data","title":"@label(meth) Fetch Data","text":"<pre><code>async fetchData():Promise&lt;void&gt;\n</code></pre> Description This method instructs the service to make an API call to the backend, and updates an internal <code>BehaviorSubject</code>, which can be referenced by calling <code>CluserService.getClusters()</code>."},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-get-groups","title":"@label(meth) Get Groups","text":"<pre><code>getClusters(): BehaviorSubject&lt;Cluster[]&gt;\n</code></pre> Description Calling this method will return a reference to a private <code>BehaviorSubject</code> that keeps track of all <code>Groups</code> stored in memory. The returned <code>BehaviorSubject</code> is subject to filters that has been applied. Returns <code>BehaviorSubject&lt;Cluster[]&gt;</code> that updates whenever <code>$all_clusters</code>, <code>$filters</code>, or <code>$sorter</code> has been changed."},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-get-group-by-id","title":"@label(meth) Get Group by ID","text":"<pre><code>getCluster(id:string): BehaviorSubject&lt;Cluster&gt;\n</code></pre> Description Fetch a group from memory, by its ID. Parameters id (string): ID of the group. Returns <code>BehaviorSubject&lt;Cluster&gt;</code> which will update if and only if the data itself is changed. This will circumvent all sorts and filters. <p>One way binding</p> <p>While this method returns a <code>BehaviorSubject</code>, it does not update the global state of this cluster. A <code>BehaviorSubject</code> is used in this case so that it will hold a value.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#filter-methods","title":"Filter Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelprivate-labelmeth-apply-filter-to-groups","title":"@label(private) @label(meth) Apply Filter to Groups","text":"<pre><code>private applyFilterToClusters(clusters:Cluster[], filters:FilterGroup):Cluster[]\n</code></pre> Description This method is used to apply all filters to the provided clusters. This logic has been placed in its own function so that it can be reused in the future. It is currently only used when there is a change to <code>ClusterService.$filters</code>. Parameters clusters(Cluster[]): original array of <code>Cluster</code>s (groups). filters(FilterGroup): object containing all the filters that are to be applied. Returns <code>Cluster[]</code> containing an array of residual <code>Cluster</code>s."},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-add-filter","title":"@label(meth) Add Filter","text":"<pre><code>addFilter(name:string, filter:Filter):void\n</code></pre> Description Adds a filter to a private <code>BehaviorSubject</code> to filter clusters being displayed. Parameters: name(string): Name of the filter. This will be the filter \"key.\" filter(Filter): Filter anonymous function. <p>Not fully implemented</p> <p>While the filter will be updated in its private attribute, the current implementation does not implement the filtering of <code>Group</code>s being retrieved.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-remove-filter","title":"@label(meth) Remove Filter","text":"<pre><code>removeFilter(name:string):void\n</code></pre> Description Removes a filter by name. Parameters name(string): Name of the filter, the \"key.\""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#sort-methods","title":"Sort Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/cluster/#labelmeth-update-sort","title":"@label(meth) Update Sort","text":"<pre><code>updateSort(sorter:Sorter):void\n</code></pre> Description Replaces the sorter for the service. Parameters sorter(Sorter): Sorter anonymous function to order clusters. <p>Not fully implemented</p> <p>This method (and related methods) do not appear to be fully implemented.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/","title":"Colour","text":"<p>This service was implemented to generate colour attributes for styling of components. The typical use case would be to use this for labels that are difficult to define by a type.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#labelservice-colourservice","title":"@label(service) ColourService","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#labelprivate-labelattr-memoizedlabelcolours","title":"@label(private) @label(attr) memoizedLabelColours","text":"<p><code>Record&lt;string, string&gt;</code> to store memoized calculated <code>hsla()</code> strings when hashing strings.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#labelprivate-labelmeth-string-hash","title":"@label(private) @label(meth) String Hash","text":"<pre><code>private stringHash(label:string): number\n</code></pre> Description Method to hash a string into a number. This number will be used for the <code>hue</code> in <code>hsla</code>. Parameters label(string): This will typically be the string that we are trying to create a colour for. Returns A number in the range of \\([1, 360]\\) corresponding to the <code>hue</code> in <code>hsla</code>."},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#labelmeth-string-hsl","title":"@label(meth) String HSL","text":"<pre><code>stringHSL(label:string): string\n</code></pre> Description Method to convert a string payload into a <code>hsla</code> string for CSS. Parameters label(string): This will typically be the string that we are trying to create a colour for. Returns String that is to be used in CSS. E.g. <code>hsla(252, 20%, 60%, 20%)</code>."},{"location":"projects/genai/health-hub/webapp/frontend/services/colour/#labelmeth-intensity-hsl","title":"@label(meth) Intensity HSL","text":"<pre><code>intensityHSL(val:number, lower:number=0, upper:number=1): string\n</code></pre> Description Method to create a <code>hsl</code> string based on a numeric value, on a range of \\(h\\in[0, 120]\\) which corresponds to a range of red to green hues. Parameters val(number): The number that we are trying to generate a <code>hsla</code> for. lower(number=0): Lower bound value on the scale. upper(number=0): Upper bound value on the scale. Returns String that is to be used in CSS. E.g. <code>hsla(252, 20%, 60%, 20%)</code>."},{"location":"projects/genai/health-hub/webapp/frontend/services/job/","title":"Job","text":"<p>This service was designed to be a singleton to manage <code>GroupManager</code>s across the frontend, allowing components to access the same (and correct) <code>GroupManager</code>.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#labelservice-jobservice","title":"@label(service) JobService","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#labelattr-groupmanagers","title":"@label(attr) groupManagers","text":"<p><code>Record&lt;string, GroupManager&gt;</code> stores <code>GroupManager</code>s in a key value object.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#labelmeth-initialise","title":"@label(meth) Initialise","text":"<pre><code>initialise(cluster: Cluster): void\n</code></pre> Description Method to initialise a <code>GroupManager</code> and add it to <code>JobService.groupManagers</code>. Parameters cluster(Cluster): <code>Cluster</code> data type."},{"location":"projects/genai/health-hub/webapp/frontend/services/job/#labelmeth-get-group-manager","title":"@label(meth) Get Group Manager","text":"<pre><code>getGroupManager(id:string): GroupManager\n</code></pre> Description Method to get a reference to the <code>GroupManager</code> with specified key. Parameters id(string): the \"key\" that matches the <code>GroupManager</code> in <code>JobService.groupManagers</code>. Returns <code>GroupManager</code>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/","title":"Article","text":"<p>Outdated</p> <p>This type has yet to be updated to follow the changed required in V2.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labeltype-article","title":"@label(type) Article","text":"TypeScript <pre><code>export enum ArticleStatus {\n    Default = \"\",\n    Combined = \"COMBINED\",\n    Ignored = \"IGNORED\"\n}\n\nexport interface Article {\n    id: string,\n    title: string,\n    description: string,\n    pr_name: string,\n    content_category: string,\n    url: string,\n    date_modified: string,\n    status: ArticleStatus,\n    keywords: string[],\n    cover_image_url: string,\n    engagement_rate: number,\n    number_of_views: number\n}\n</code></pre> <p>!!! WARNING \"Deprecation of <code>ArticleStatus</code></p> <pre><code>Article status has been deprecated in favour of organising articles into \"sub-group\" arrays. See `Group` Pydantic type.\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-id","title":"@label(attr) Id","text":"<p><code>string</code> Unique identifier for the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-title","title":"@label(attr) Title","text":"<p><code>string</code> Title of the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-description","title":"@label(attr) Description","text":"<p><code>string</code> Brief description of the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-pr-name","title":"@label(attr) PR Name","text":"<p><code>string</code> Name of the public relations contact or the author.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-content-category","title":"@label(attr) Content Category","text":"<p><code>string</code> Category under which the article falls.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-url","title":"@label(attr) URL","text":"<p><code>string</code> Web address where the article can be accessed.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-date-modified","title":"@label(attr) Date Modified","text":"<p><code>string</code> Last modification date of the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-status","title":"@label(attr) Status","text":"<p><code>ArticleStatus</code> Status of the article, which can be Default, Combined, or Ignored.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-keywords","title":"@label(attr) Keywords","text":"<p><code>string[]</code> List of keywords associated with the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-cover-image-url","title":"@label(attr) Cover Image URL","text":"<p><code>string</code> URL of the cover image for the article.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-engagement-rate","title":"@label(attr) Engagement Rate","text":"<p><code>number</code> Rate of engagement that the article has received.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/article/#labelattr-number-of-views","title":"@label(attr) Number of Views","text":"<p><code>number</code> Total number of views that the article has accumulated.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/","title":"Cluster","text":"<p>Outdated terminology</p> <p>This should instead be named \"group\" but has yet to be renamed.</p> <p>Not updated</p> <p>This should mirror the <code>Group</code> Pydantic model from the backend, since that is the response model.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#labeltype-cluster","title":"@label(type) Cluster","text":"TypeScript <pre><code>export interface Cluster {\n    id: string,\n    name: string,\n    articles: Article[],\n    edges: Edge[]\n}\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#labelattr-id","title":"@label(attr) Id","text":"<p><code>string</code> identifier for the cluster.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#labelattr-name","title":"@label(attr) Name","text":"<p><code>stirng</code> given name for the cluster.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#labelattr-articles","title":"@label(attr) Articles","text":"<p><code>Article[]</code> array of <code>Article</code>'s that are found in the cluster.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/cluster/#labelattr-edges","title":"@label(attr) Edges","text":"<p><code>Edge[]</code> array of <code>Edge</code>'s that connect the <code>Article</code>'s within the cluster.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/","title":"Edge","text":"<p>This edge data type is used in <code>Cluster</code>'s to map a bidirectional connection between two <code>Article</code>'s.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/#labeltype-edge","title":"@label(type) Edge","text":"TypeScript <pre><code>export interface Edge {\n    start: string,\n    end: string,\n    weight: number\n}\n</code></pre> <p>Bidirectional</p> <p>While the <code>Edge</code> type has a <code>start</code> and <code>end</code> attribute, the intended representation is a bidirectional edge between two nodes (<code>Article</code>'s). They are given this attributes soley due to how <code>d3.js</code> handles edges.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/#labelattr-start","title":"@label(attr) Start","text":"<p><code>string</code> representing the ID of an <code>Article</code>.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/#labelattr-end","title":"@label(attr) End","text":"<p><code>string</code> representing the ID of an <code>Article</code>.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/edge/#labelattr-weight","title":"@label(attr) Weight","text":"<p><code>number</code> weight of the connection between two <code>Article</code>'s, whereby <code>Edge.weight</code> \\(\\in[0,1]\\).</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/","title":"Groups","text":"<p>This is a data type to hold articles in sub-groups, with wildcard names for user defined sub-groups.</p> <p>Outdated</p> <p>Following the direction in V2, this should be named <code>SubGroups</code> instead. Furthermore, the requirement set out by V2 required this type to be updated to facilitate the new features and expected functions.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#labeltype-groups","title":"@label(type) Groups","text":"TypeScript <pre><code>export interface Groups {\n  default: Article[],\n  combine: Article[],\n  ignore: Article[],\n  [key:string]: Article[]\n}\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#labelattr-default","title":"@label(attr) Default","text":"<p><code>Article[]</code> articles that are to be combined by default.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#labelattr-combine","title":"@label(attr) Combine","text":"<p><code>Article[]</code> articles that have already been combined.</p> <p>Deprecate</p> <p>This should be deprecated, as the intended implementation in V2 should have <code>Article</code>'s loaded into their own respective subgroups, this is to allow the user to submit a new <code>Job</code> after editing.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#labelattr-ignore","title":"@label(attr) Ignore","text":"<p><code>Article[]</code> articles that should not be combined.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/groups/#labelattr-keystring","title":"@label(attr) [key:string]","text":"<p><code>Article[]</code> articles that belong to a user defined subgroup.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/sorter/","title":"Sorter","text":"<p>This type is used to define a method to sort clusters.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/types/sorter/#labeltype-sorter","title":"@label(type) Sorter","text":"<p>Sorter is a <code>type</code> for an anonymous function to reorder clusters.</p> TypeScript <pre><code>export type sorter = (arg0:Cluster[]) =&gt; Cluster[]\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/","title":"Group Manager","text":"<p>The core functionality of this class was designed to abstract the logic for <code>Articles</code> and their relation to \"sub-groups\" for harmonisation and marking for the various jobs.</p> <p>Incomplete</p> <p>Code in this class is incomplete due to the migration of V1 to V2. While it works for V1, it has not been updated to V2.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelclass-groupmanager","title":"@label(class) GroupManager","text":"TypeScriptExample <pre><code>GroupManager.constructor(cluster: Cluster)\n</code></pre> <pre><code>const myGroupManager = new GroupManager(cluster)\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#attributes","title":"Attributes","text":""},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelattr-groups","title":"@label(attr) $groups","text":"<p><code>BehaviorSubject&lt;Groups&gt;</code> to keep track of groups and their respective articles.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelmeth-get-grouping","title":"@label(meth) Get Grouping","text":"<pre><code>getGrouping(): BehaviorSubject&lt;Groups&gt;\n</code></pre> Description Method to get current (and future) groupings for articles. Returns <code>BehaviorSubject&lt;Groups&gt;</code>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelmeth-get-addable-grouping-names","title":"@label(meth) Get Addable Grouping Names","text":"<pre><code>getAddableGroupingNames(): BehaviorSubject&lt;string[]&gt;\n</code></pre> Description Method to get a <code>BehaviorSubject</code> of existing group names that articles can be added to for harmonisation. Returns <code>BehaviorSubject&lt;string[]&gt;</code>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelmeth-assign-article","title":"@label(meth) Assign Article","text":"<pre><code>assignArticle(id:string, group:string):void\n</code></pre> Description Method to assign an article to a specified sub-group and removes it from its current sub-group. This method is also used when adding the article to a new sub-group. Parameters id(string): Article ID group(string): Name of the subgroup. This includes \"remove\" and \"ignore\" <p>Outdated terminology</p> <p>Parameter <code>group</code> should be termed \"sub-group\" instead.</p>"},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelmeth-find-article-group","title":"@label(meth) Find Article Group","text":"<pre><code>findArticleGroup(id:string): string\n</code></pre> Description Finds the name of the group that contains the article with the specified ID. Parameters id(string): Article ID Returns <code>string</code> The name of the group containing the article, or a default status if not found."},{"location":"projects/genai/health-hub/webapp/frontend/utilities/group_manager/#labelmeth-find-article-group-behavior-subject","title":"@label(meth) Find Article Group (Behavior Subject)","text":"<pre><code>findArticleGroupBehaviourSubject(id:string): BehaviorSubject&lt;string&gt;\n</code></pre> Description Retrieves a BehaviorSubject that emits the current article group and updates when the group changes. Parameters id(string): Article ID Returns <code>BehaviorSubject&lt;string&gt;</code> BehaviorSubject emitting the current article group."},{"location":"projects/genai/health-hub/webapp/misc/mocker/","title":"Mocker","text":""},{"location":"projects/genai/health-hub/webapp/misc/mocker/#overview","title":"Overview","text":"<p>Mocker is a utility module that provides functions to generate mock data for testing purposes. It is used to create dummy data that can be used to simulate real-world scenarios in the absence of actual data. The module generates random data based on predefined schemas and can be customized to suit specific testing requirements.</p>"},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelclass-mocker","title":"@label(class) Mocker","text":""},{"location":"projects/genai/health-hub/webapp/misc/mocker/#methods","title":"Methods","text":""},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelprivate-labelmeth-create-article-ids","title":"@label(private) @label(meth) Create Article IDs","text":"<pre><code>```python\ndef __create_article_ids(self) -&gt; List[str]\n```\n</code></pre> Description Generates a list of unique article IDs. Returns A list of unique article IDs."},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelprivate-labelmeth-create-date","title":"@label(private) @label(meth) Create Date","text":"<pre><code>```python\ndef _create_date(self) -&gt; str\n```\n</code></pre> Description Generates a random date. Returns A string representing a random date in the format 'YYYY-MM-DD'."},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelprivate-labelmeth-generate-article-status","title":"@label(private) @label(meth) Generate article status","text":"<pre><code>```python\n    def __generate_article_status(self, group_size: int) -&gt; List[str]\n```\n</code></pre> Description Generates a list of article statuses based on the number of articles in a group. For Groups with More Than One Article: The possible statuses for articles include <code>Combined</code>, <code>Removed</code>, <code>Ignored</code>, or <code>Optimised</code>. It is a requirement for groups of this size to have a minimum of two articles labeled as <code>Combined</code>. For Single-Article Groups: When a group consists of only one article, the article may be assigned any of the following statuses: <code>Removed</code>, <code>Ignored</code>, or <code>Optimised</code>. The <code>Combined</code> status is excluded in this scenario as it implies the presence of multiple articles. Parameters <code>group_size</code> (int): The number of articles in the group. <p>Returns: A list of article statuses for the articles in the group (str).</p>"},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelprivate-labelmeth-create-combine-article","title":"@label(private) @label(meth) Create Combine Article","text":"<pre><code>```python\n async def __create_combine_articles(\n        self, group_id: str, combine_ids: List[str]\n    ) -&gt; None\n```\n</code></pre> Description Creates a new Combine Job with articles in the same group and subgroup, and then insert into the database. This function also ensures that every subgroup created contains at least two articles."},{"location":"projects/genai/health-hub/webapp/misc/mocker/#create-article","title":"<code>Create Article</code>","text":"<pre><code>```python\n    def __create_article(self, article_id: str, status: str) -&gt; Article\n```\n</code></pre> Description Creates an <code>Article</code> with the specified ID and status. Other attributes are generated randomly or set to default values. Returns An <code>Article</code> object."},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelmeth-create-articles","title":"@label(meth) Create Articles","text":"<pre><code>```python\n    async def create_articles(self, article_ids: List[str]) -&gt; List[Article]\n```\n</code></pre> Description Creates a list of <code>Article</code> objects with the specified IDs. This function also assigns statuses from <code>__generate_article_status()</code> randomly to the articles by keeping track of which Article ID is assigned to which status. Parameters <code>article_ids</code> (List[str]): A list of article IDs. <p>Returns: A list of <code>Article</code></p>"},{"location":"projects/genai/health-hub/webapp/misc/mocker/#labelmeth-mock","title":"@label(meth) Mock","text":"<pre><code>```python\nasync def mock(self) -&gt; None:\n```\n</code></pre> Description This is the main function that generates mock data for the database by creating <code>Documents</code> and inserting them into the database. <p>Group review status</p> <p>A <code>Group</code> can either be reviewed or not reviewed. Only if a <code>Group</code> is reviewed, it will have a <code>Job</code> associated with it and all the articles in the group will have a status.</p>"},{"location":"projects/genai/health-hub/webapp/misc/populator/","title":"Populater","text":"<p>In order to populate the database with data from the pipeline, a <code>Populater</code> class is used.</p>"},{"location":"projects/genai/health-hub/webapp/misc/populator/#labelclass-populater","title":"@label(class) Populater","text":"PythonExample <pre><code>class DBPopulater:\n    def __init__(\n        self,\n        mongo_connector: DbConnector,\n        articles_file_path: str,\n        edges_file_path: str,\n        cluster_file_path: str\n    )\n</code></pre> <p>In this example, we are using <code>MongoDb</code> as the database, therefore <code>MongoConnector</code> is being passed into the <code>DBPopulater</code>. However, as long as the class being passed in implements the methods in <code>DbConnector</code> interface, then there should be no issues.</p> <pre><code># Create database connector\nconn = MongoConnector(\n    username=os.getenv(\"MONGO_USERNAME\"),\n    password=os.getenv(\"MONGO_PASSWORD\"),\n    host=os.getenv(\"MONGO_HOST\"),\n    port=os.getenv(\"MONGO_PORT\"),\n    db_name=\"storage\",\n)\n\n# Defining paths for data files\narticles_file_path = \"path/to/merged_data.parquet\"\nedges_file_path = \"path/to/edges.pkl\"\ncluster_file_path = \"path/to/cluster.pkl\"\n\n# Instantiate `DBPopulater`\npopulater = DBPopulater(\n    conn, articles_file_path, edges_file_path, cluster_file_path\n)\n\n# Run population methods\nawait db_populator.populate_articles()\nawait db_populator.populate_edges()\nawait db_populator.populate_clusters()\n</code></pre>"},{"location":"projects/genai/health-hub/webapp/misc/populator/#initialisation","title":"Initialisation","text":""},{"location":"projects/genai/health-hub/webapp/misc/populator/#labelmeth-initialise-connection","title":"@label(meth) Initialise Connection","text":"<pre><code>```python\nasync def init_db() -&gt; None\n```\n</code></pre> Description Method to initialise database connection. This method does not need to be called explicitly."},{"location":"projects/genai/health-hub/webapp/misc/populator/#seeding","title":"Seeding","text":""},{"location":"projects/genai/health-hub/webapp/misc/populator/#labelmeth-populate-articles","title":"@label(meth) Populate Articles","text":"<pre><code>```python\nasync def populate_articles() -&gt; None\n```\n</code></pre> Description Method to populate articles into the database."},{"location":"projects/genai/health-hub/webapp/misc/populator/#labelmeth-populate-edges","title":"@label(meth) Populate Edges","text":"<pre><code>```python\nasync def populate_edges() -&gt; None\n```\n</code></pre> Description Method to populate edges into the database."},{"location":"projects/genai/health-hub/webapp/misc/populator/#labelmeth-populate-groups","title":"@label(meth) Populate Groups","text":"<pre><code>```python\nasync def populate_clusters() -&gt; None\n```\n</code></pre> <p>Must be called after `DBPopulater.populate_articles()</p> <p>With the current implementation, this method must only be called after articles have been populated into the database.</p> <p>Outdated method name</p> <p>This method's name should be updated to <code>populate_groups()</code> as the terminology for \"clusters\" was shifted to \"groups\" across the project.</p> Description Method to populate groups into the database."},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/engineering/","title":"Engineering","text":""},{"location":"blog/category/guides/","title":"Guides","text":""}]}